name: CI

on:
  push:
    branches: [main]
    tags: ["releases/**"]
  pull_request:
    branches: ["*"]

jobs:
  typescript:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [ws-protocol, ws-protocol-examples]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: yarn workspace @foxglove/${{ matrix.package }} lint:ci
      - run: yarn workspace @foxglove/${{ matrix.package }} test

      - name: Publish to NPM
        if: ${{ startsWith(github.ref, format('refs/tags/releases/typescript/{0}/v', matrix.package)) }}
        run: yarn workspace @foxglove/${{ matrix.package }} publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: pipenv
      - run: pip install pipenv
      - run: pipenv install --dev --deploy
      - run: pipenv run black --check --diff --color
      - run: pipenv run pyright src tests
      - run: pipenv run pytest
      - run: pipenv run python -m build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_API_TOKEN }}
          packages_dir: python/dist
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/releases/python/v') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: python/dist

  cpp:
    runs-on: ubuntu-latest
    container:
      image: conanio/clang10
      options: --user root
    defaults:
      run:
        working-directory: cpp
    steps:
      - name: install build dependencies
        working-directory: /
        run: |
          # add Git PPA; Git must be at least v2.18 for actions/checkout to work
          echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main" >> /etc/apt/sources.list
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A1715D88E1DF1F24
          apt-get update
          apt-get install -y --no-install-recommends --no-install-suggests \
            git clang-format-10
          update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-10 100
      - uses: actions/checkout@v2
      - run: make format
      - run: make coverage
      - run: make debug
