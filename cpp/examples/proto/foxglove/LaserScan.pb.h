// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LaserScan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLaserScan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLaserScan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Pose.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fLaserScan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fLaserScan_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fLaserScan_2eproto;
namespace foxglove {
class LaserScan;
struct LaserScanDefaultTypeInternal;
extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::LaserScan* Arena::CreateMaybeMessage<::foxglove::LaserScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class LaserScan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.LaserScan) */ {
 public:
  inline LaserScan() : LaserScan(nullptr) {}
  ~LaserScan() override;
  explicit PROTOBUF_CONSTEXPR LaserScan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaserScan(const LaserScan& from);
  LaserScan(LaserScan&& from) noexcept
    : LaserScan() {
    *this = ::std::move(from);
  }

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaserScan& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
               &_LaserScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaserScan& a, LaserScan& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserScan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserScan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaserScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaserScan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaserScan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaserScan& from) {
    LaserScan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.LaserScan";
  }
  protected:
  explicit LaserScan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 6,
    kIntensitiesFieldNumber = 7,
    kFrameIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kPoseFieldNumber = 3,
    kStartAngleFieldNumber = 4,
    kEndAngleFieldNumber = 5,
  };
  // repeated double ranges = 6;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  private:
  double _internal_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ranges() const;
  void _internal_add_ranges(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ranges();
  public:
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ranges();

  // repeated double intensities = 7;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  double _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_intensities() const;
  void _internal_add_intensities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_intensities();
  public:
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intensities();

  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .foxglove.Pose pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::foxglove::Pose& pose() const;
  PROTOBUF_NODISCARD ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);
  private:
  const ::foxglove::Pose& _internal_pose() const;
  ::foxglove::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::foxglove::Pose* pose);
  ::foxglove::Pose* unsafe_arena_release_pose();

  // double start_angle = 4;
  void clear_start_angle();
  double start_angle() const;
  void set_start_angle(double value);
  private:
  double _internal_start_angle() const;
  void _internal_set_start_angle(double value);
  public:

  // double end_angle = 5;
  void clear_end_angle();
  double end_angle() const;
  void set_end_angle(double value);
  private:
  double _internal_end_angle() const;
  void _internal_set_end_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.LaserScan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ranges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intensities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::foxglove::Pose* pose_;
    double start_angle_;
    double end_angle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fLaserScan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserScan

// .google.protobuf.Timestamp timestamp = 1;
inline bool LaserScan::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool LaserScan::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaserScan::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaserScan::timestamp() const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.timestamp)
  return _internal_timestamp();
}
inline void LaserScan::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.LaserScan.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaserScan::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaserScan::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.LaserScan.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaserScan::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaserScan::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.LaserScan.timestamp)
  return _msg;
}
inline void LaserScan::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LaserScan.timestamp)
}

// string frame_id = 2;
inline void LaserScan::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
}
inline const std::string& LaserScan::frame_id() const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaserScan::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.LaserScan.frame_id)
}
inline std::string* LaserScan::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:foxglove.LaserScan.frame_id)
  return _s;
}
inline const std::string& LaserScan::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void LaserScan::_internal_set_frame_id(const std::string& value) {
  
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaserScan::_internal_mutable_frame_id() {
  
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaserScan::release_frame_id() {
  // @@protoc_insertion_point(field_release:foxglove.LaserScan.frame_id)
  return _impl_.frame_id_.Release();
}
inline void LaserScan::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.LaserScan.frame_id)
}

// .foxglove.Pose pose = 3;
inline bool LaserScan::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool LaserScan::has_pose() const {
  return _internal_has_pose();
}
inline const ::foxglove::Pose& LaserScan::_internal_pose() const {
  const ::foxglove::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Pose&>(
      ::foxglove::_Pose_default_instance_);
}
inline const ::foxglove::Pose& LaserScan::pose() const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.pose)
  return _internal_pose();
}
inline void LaserScan::unsafe_arena_set_allocated_pose(
    ::foxglove::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.LaserScan.pose)
}
inline ::foxglove::Pose* LaserScan::release_pose() {
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Pose* LaserScan::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.LaserScan.pose)
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::foxglove::Pose* LaserScan::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::foxglove::Pose* LaserScan::mutable_pose() {
  ::foxglove::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:foxglove.LaserScan.pose)
  return _msg;
}
inline void LaserScan::set_allocated_pose(::foxglove::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LaserScan.pose)
}

// double start_angle = 4;
inline void LaserScan::clear_start_angle() {
  _impl_.start_angle_ = 0;
}
inline double LaserScan::_internal_start_angle() const {
  return _impl_.start_angle_;
}
inline double LaserScan::start_angle() const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.start_angle)
  return _internal_start_angle();
}
inline void LaserScan::_internal_set_start_angle(double value) {
  
  _impl_.start_angle_ = value;
}
inline void LaserScan::set_start_angle(double value) {
  _internal_set_start_angle(value);
  // @@protoc_insertion_point(field_set:foxglove.LaserScan.start_angle)
}

// double end_angle = 5;
inline void LaserScan::clear_end_angle() {
  _impl_.end_angle_ = 0;
}
inline double LaserScan::_internal_end_angle() const {
  return _impl_.end_angle_;
}
inline double LaserScan::end_angle() const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.end_angle)
  return _internal_end_angle();
}
inline void LaserScan::_internal_set_end_angle(double value) {
  
  _impl_.end_angle_ = value;
}
inline void LaserScan::set_end_angle(double value) {
  _internal_set_end_angle(value);
  // @@protoc_insertion_point(field_set:foxglove.LaserScan.end_angle)
}

// repeated double ranges = 6;
inline int LaserScan::_internal_ranges_size() const {
  return _impl_.ranges_.size();
}
inline int LaserScan::ranges_size() const {
  return _internal_ranges_size();
}
inline void LaserScan::clear_ranges() {
  _impl_.ranges_.Clear();
}
inline double LaserScan::_internal_ranges(int index) const {
  return _impl_.ranges_.Get(index);
}
inline double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.ranges)
  return _internal_ranges(index);
}
inline void LaserScan::set_ranges(int index, double value) {
  _impl_.ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.LaserScan.ranges)
}
inline void LaserScan::_internal_add_ranges(double value) {
  _impl_.ranges_.Add(value);
}
inline void LaserScan::add_ranges(double value) {
  _internal_add_ranges(value);
  // @@protoc_insertion_point(field_add:foxglove.LaserScan.ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::_internal_ranges() const {
  return _impl_.ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:foxglove.LaserScan.ranges)
  return _internal_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::_internal_mutable_ranges() {
  return &_impl_.ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LaserScan.ranges)
  return _internal_mutable_ranges();
}

// repeated double intensities = 7;
inline int LaserScan::_internal_intensities_size() const {
  return _impl_.intensities_.size();
}
inline int LaserScan::intensities_size() const {
  return _internal_intensities_size();
}
inline void LaserScan::clear_intensities() {
  _impl_.intensities_.Clear();
}
inline double LaserScan::_internal_intensities(int index) const {
  return _impl_.intensities_.Get(index);
}
inline double LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LaserScan.intensities)
  return _internal_intensities(index);
}
inline void LaserScan::set_intensities(int index, double value) {
  _impl_.intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.LaserScan.intensities)
}
inline void LaserScan::_internal_add_intensities(double value) {
  _impl_.intensities_.Add(value);
}
inline void LaserScan::add_intensities(double value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:foxglove.LaserScan.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::_internal_intensities() const {
  return _impl_.intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:foxglove.LaserScan.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::_internal_mutable_intensities() {
  return &_impl_.intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LaserScan.intensities)
  return _internal_mutable_intensities();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLaserScan_2eproto
