// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LinePrimitive.proto

#include "foxglove/LinePrimitive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR LinePrimitive::LinePrimitive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.scale_invariant_)*/false
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinePrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinePrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinePrimitiveDefaultTypeInternal() {}
  union {
    LinePrimitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinePrimitiveDefaultTypeInternal _LinePrimitive_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fLinePrimitive_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_foxglove_2fLinePrimitive_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fLinePrimitive_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fLinePrimitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.thickness_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.scale_invariant_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.colors_),
  PROTOBUF_FIELD_OFFSET(::foxglove::LinePrimitive, _impl_.indices_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::LinePrimitive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_LinePrimitive_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fLinePrimitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034foxglove/LinePrimitive.proto\022\010foxglove"
  "\032\024foxglove/Color.proto\032\025foxglove/Point3."
  "proto\032\023foxglove/Pose.proto\"\257\002\n\rLinePrimi"
  "tive\022*\n\004type\030\001 \001(\0162\034.foxglove.LinePrimit"
  "ive.Type\022\034\n\004pose\030\002 \001(\0132\016.foxglove.Pose\022\021"
  "\n\tthickness\030\003 \001(\001\022\027\n\017scale_invariant\030\004 \001"
  "(\010\022 \n\006points\030\005 \003(\0132\020.foxglove.Point3\022\036\n\005"
  "color\030\006 \001(\0132\017.foxglove.Color\022\037\n\006colors\030\007"
  " \003(\0132\017.foxglove.Color\022\017\n\007indices\030\010 \003(\007\"4"
  "\n\004Type\022\016\n\nLINE_STRIP\020\000\022\r\n\tLINE_LOOP\020\001\022\r\n"
  "\tLINE_LIST\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fLinePrimitive_2eproto_deps[3] = {
  &::descriptor_table_foxglove_2fColor_2eproto,
  &::descriptor_table_foxglove_2fPoint3_2eproto,
  &::descriptor_table_foxglove_2fPose_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fLinePrimitive_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fLinePrimitive_2eproto = {
    false, false, 420, descriptor_table_protodef_foxglove_2fLinePrimitive_2eproto,
    "foxglove/LinePrimitive.proto",
    &descriptor_table_foxglove_2fLinePrimitive_2eproto_once, descriptor_table_foxglove_2fLinePrimitive_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fLinePrimitive_2eproto::offsets,
    file_level_metadata_foxglove_2fLinePrimitive_2eproto, file_level_enum_descriptors_foxglove_2fLinePrimitive_2eproto,
    file_level_service_descriptors_foxglove_2fLinePrimitive_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fLinePrimitive_2eproto_getter() {
  return &descriptor_table_foxglove_2fLinePrimitive_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fLinePrimitive_2eproto(&descriptor_table_foxglove_2fLinePrimitive_2eproto);
namespace foxglove {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinePrimitive_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_foxglove_2fLinePrimitive_2eproto);
  return file_level_enum_descriptors_foxglove_2fLinePrimitive_2eproto[0];
}
bool LinePrimitive_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LinePrimitive_Type LinePrimitive::LINE_STRIP;
constexpr LinePrimitive_Type LinePrimitive::LINE_LOOP;
constexpr LinePrimitive_Type LinePrimitive::LINE_LIST;
constexpr LinePrimitive_Type LinePrimitive::Type_MIN;
constexpr LinePrimitive_Type LinePrimitive::Type_MAX;
constexpr int LinePrimitive::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LinePrimitive::_Internal {
 public:
  static const ::foxglove::Pose& pose(const LinePrimitive* msg);
  static const ::foxglove::Color& color(const LinePrimitive* msg);
};

const ::foxglove::Pose&
LinePrimitive::_Internal::pose(const LinePrimitive* msg) {
  return *msg->_impl_.pose_;
}
const ::foxglove::Color&
LinePrimitive::_Internal::color(const LinePrimitive* msg) {
  return *msg->_impl_.color_;
}
void LinePrimitive::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
void LinePrimitive::clear_points() {
  _impl_.points_.Clear();
}
void LinePrimitive::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
void LinePrimitive::clear_colors() {
  _impl_.colors_.Clear();
}
LinePrimitive::LinePrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.LinePrimitive)
}
LinePrimitive::LinePrimitive(const LinePrimitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinePrimitive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.colors_){from._impl_.colors_}
    , decltype(_impl_.indices_){from._impl_.indices_}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.scale_invariant_){}
    , decltype(_impl_.thickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::foxglove::Pose(*from._impl_.pose_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::foxglove::Color(*from._impl_.color_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thickness_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.thickness_));
  // @@protoc_insertion_point(copy_constructor:foxglove.LinePrimitive)
}

inline void LinePrimitive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.colors_){arena}
    , decltype(_impl_.indices_){arena}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.scale_invariant_){false}
    , decltype(_impl_.thickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LinePrimitive::~LinePrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.LinePrimitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinePrimitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.colors_.~RepeatedPtrField();
  _impl_.indices_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void LinePrimitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinePrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.LinePrimitive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.colors_.Clear();
  _impl_.indices_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.thickness_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.thickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinePrimitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .foxglove.LinePrimitive.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::foxglove::LinePrimitive_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool scale_invariant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.scale_invariant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.Point3 points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Color color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.Color colors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 indices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinePrimitive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.LinePrimitive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.LinePrimitive.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .foxglove.Pose pose = 2;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // double thickness = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_thickness(), target);
  }

  // bool scale_invariant = 4;
  if (this->_internal_scale_invariant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_scale_invariant(), target);
  }

  // repeated .foxglove.Point3 points = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .foxglove.Color color = 6;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // repeated .foxglove.Color colors = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated fixed32 indices = 8;
  if (this->_internal_indices_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_indices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.LinePrimitive)
  return target;
}

size_t LinePrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.LinePrimitive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .foxglove.Point3 points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.Color colors = 7;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_impl_.colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed32 indices = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_indices_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .foxglove.Pose pose = 2;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .foxglove.Color color = 6;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // .foxglove.LinePrimitive.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool scale_invariant = 4;
  if (this->_internal_scale_invariant() != 0) {
    total_size += 1 + 1;
  }

  // double thickness = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinePrimitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinePrimitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinePrimitive::GetClassData() const { return &_class_data_; }


void LinePrimitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinePrimitive*>(&to_msg);
  auto& from = static_cast<const LinePrimitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.LinePrimitive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.colors_.MergeFrom(from._impl_.colors_);
  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::foxglove::Pose::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::foxglove::Color::MergeFrom(
        from._internal_color());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_scale_invariant() != 0) {
    _this->_internal_set_scale_invariant(from._internal_scale_invariant());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = from._internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinePrimitive::CopyFrom(const LinePrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.LinePrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePrimitive::IsInitialized() const {
  return true;
}

void LinePrimitive::InternalSwap(LinePrimitive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinePrimitive, _impl_.thickness_)
      + sizeof(LinePrimitive::_impl_.thickness_)
      - PROTOBUF_FIELD_OFFSET(LinePrimitive, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinePrimitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fLinePrimitive_2eproto_getter, &descriptor_table_foxglove_2fLinePrimitive_2eproto_once,
      file_level_metadata_foxglove_2fLinePrimitive_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::LinePrimitive*
Arena::CreateMaybeMessage< ::foxglove::LinePrimitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::LinePrimitive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
