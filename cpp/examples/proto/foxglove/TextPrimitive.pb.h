// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/TextPrimitive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fTextPrimitive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fTextPrimitive_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fTextPrimitive_2eproto;
namespace foxglove {
class TextPrimitive;
struct TextPrimitiveDefaultTypeInternal;
extern TextPrimitiveDefaultTypeInternal _TextPrimitive_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::TextPrimitive* Arena::CreateMaybeMessage<::foxglove::TextPrimitive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class TextPrimitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.TextPrimitive) */ {
 public:
  inline TextPrimitive() : TextPrimitive(nullptr) {}
  ~TextPrimitive() override;
  explicit PROTOBUF_CONSTEXPR TextPrimitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextPrimitive(const TextPrimitive& from);
  TextPrimitive(TextPrimitive&& from) noexcept
    : TextPrimitive() {
    *this = ::std::move(from);
  }

  inline TextPrimitive& operator=(const TextPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextPrimitive& operator=(TextPrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextPrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextPrimitive* internal_default_instance() {
    return reinterpret_cast<const TextPrimitive*>(
               &_TextPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextPrimitive& a, TextPrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextPrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextPrimitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextPrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextPrimitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextPrimitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextPrimitive& from) {
    TextPrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextPrimitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.TextPrimitive";
  }
  protected:
  explicit TextPrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 6,
    kPoseFieldNumber = 1,
    kColorFieldNumber = 5,
    kFontSizeFieldNumber = 3,
    kBillboardFieldNumber = 2,
    kScaleInvariantFieldNumber = 4,
  };
  // string text = 6;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .foxglove.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::foxglove::Pose& pose() const;
  PROTOBUF_NODISCARD ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);
  private:
  const ::foxglove::Pose& _internal_pose() const;
  ::foxglove::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::foxglove::Pose* pose);
  ::foxglove::Pose* unsafe_arena_release_pose();

  // .foxglove.Color color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::foxglove::Color& color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);
  private:
  const ::foxglove::Color& _internal_color() const;
  ::foxglove::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::foxglove::Color* color);
  ::foxglove::Color* unsafe_arena_release_color();

  // double font_size = 3;
  void clear_font_size();
  double font_size() const;
  void set_font_size(double value);
  private:
  double _internal_font_size() const;
  void _internal_set_font_size(double value);
  public:

  // bool billboard = 2;
  void clear_billboard();
  bool billboard() const;
  void set_billboard(bool value);
  private:
  bool _internal_billboard() const;
  void _internal_set_billboard(bool value);
  public:

  // bool scale_invariant = 4;
  void clear_scale_invariant();
  bool scale_invariant() const;
  void set_scale_invariant(bool value);
  private:
  bool _internal_scale_invariant() const;
  void _internal_set_scale_invariant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.TextPrimitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::foxglove::Pose* pose_;
    ::foxglove::Color* color_;
    double font_size_;
    bool billboard_;
    bool scale_invariant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fTextPrimitive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextPrimitive

// .foxglove.Pose pose = 1;
inline bool TextPrimitive::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool TextPrimitive::has_pose() const {
  return _internal_has_pose();
}
inline const ::foxglove::Pose& TextPrimitive::_internal_pose() const {
  const ::foxglove::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Pose&>(
      ::foxglove::_Pose_default_instance_);
}
inline const ::foxglove::Pose& TextPrimitive::pose() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.pose)
  return _internal_pose();
}
inline void TextPrimitive::unsafe_arena_set_allocated_pose(
    ::foxglove::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.TextPrimitive.pose)
}
inline ::foxglove::Pose* TextPrimitive::release_pose() {
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Pose* TextPrimitive::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.pose)
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::foxglove::Pose* TextPrimitive::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::foxglove::Pose* TextPrimitive::mutable_pose() {
  ::foxglove::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.pose)
  return _msg;
}
inline void TextPrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.pose)
}

// bool billboard = 2;
inline void TextPrimitive::clear_billboard() {
  _impl_.billboard_ = false;
}
inline bool TextPrimitive::_internal_billboard() const {
  return _impl_.billboard_;
}
inline bool TextPrimitive::billboard() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.billboard)
  return _internal_billboard();
}
inline void TextPrimitive::_internal_set_billboard(bool value) {
  
  _impl_.billboard_ = value;
}
inline void TextPrimitive::set_billboard(bool value) {
  _internal_set_billboard(value);
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.billboard)
}

// double font_size = 3;
inline void TextPrimitive::clear_font_size() {
  _impl_.font_size_ = 0;
}
inline double TextPrimitive::_internal_font_size() const {
  return _impl_.font_size_;
}
inline double TextPrimitive::font_size() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.font_size)
  return _internal_font_size();
}
inline void TextPrimitive::_internal_set_font_size(double value) {
  
  _impl_.font_size_ = value;
}
inline void TextPrimitive::set_font_size(double value) {
  _internal_set_font_size(value);
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.font_size)
}

// bool scale_invariant = 4;
inline void TextPrimitive::clear_scale_invariant() {
  _impl_.scale_invariant_ = false;
}
inline bool TextPrimitive::_internal_scale_invariant() const {
  return _impl_.scale_invariant_;
}
inline bool TextPrimitive::scale_invariant() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.scale_invariant)
  return _internal_scale_invariant();
}
inline void TextPrimitive::_internal_set_scale_invariant(bool value) {
  
  _impl_.scale_invariant_ = value;
}
inline void TextPrimitive::set_scale_invariant(bool value) {
  _internal_set_scale_invariant(value);
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.scale_invariant)
}

// .foxglove.Color color = 5;
inline bool TextPrimitive::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool TextPrimitive::has_color() const {
  return _internal_has_color();
}
inline const ::foxglove::Color& TextPrimitive::_internal_color() const {
  const ::foxglove::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& TextPrimitive::color() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.color)
  return _internal_color();
}
inline void TextPrimitive::unsafe_arena_set_allocated_color(
    ::foxglove::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.TextPrimitive.color)
}
inline ::foxglove::Color* TextPrimitive::release_color() {
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* TextPrimitive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.color)
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* TextPrimitive::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::foxglove::Color* TextPrimitive::mutable_color() {
  ::foxglove::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.color)
  return _msg;
}
inline void TextPrimitive::set_allocated_color(::foxglove::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.color)
}

// string text = 6;
inline void TextPrimitive::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextPrimitive::text() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextPrimitive::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.text)
}
inline std::string* TextPrimitive::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.text)
  return _s;
}
inline const std::string& TextPrimitive::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TextPrimitive::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TextPrimitive::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TextPrimitive::release_text() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.text)
  return _impl_.text_.Release();
}
inline void TextPrimitive::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto
