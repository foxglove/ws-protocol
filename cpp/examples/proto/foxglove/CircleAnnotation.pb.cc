// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CircleAnnotation.proto

#include "foxglove/CircleAnnotation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR CircleAnnotation::CircleAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.fill_color_)*/nullptr
  , /*decltype(_impl_.outline_color_)*/nullptr
  , /*decltype(_impl_.diameter_)*/0
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CircleAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleAnnotationDefaultTypeInternal() {}
  union {
    CircleAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleAnnotationDefaultTypeInternal _CircleAnnotation_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fCircleAnnotation_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_foxglove_2fCircleAnnotation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fCircleAnnotation_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fCircleAnnotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.diameter_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.thickness_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.fill_color_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CircleAnnotation, _impl_.outline_color_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::CircleAnnotation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_CircleAnnotation_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fCircleAnnotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037foxglove/CircleAnnotation.proto\022\010foxgl"
  "ove\032\024foxglove/Color.proto\032\025foxglove/Poin"
  "t2.proto\032\037google/protobuf/timestamp.prot"
  "o\"\327\001\n\020CircleAnnotation\022-\n\ttimestamp\030\001 \001("
  "\0132\032.google.protobuf.Timestamp\022\"\n\010positio"
  "n\030\002 \001(\0132\020.foxglove.Point2\022\020\n\010diameter\030\003 "
  "\001(\001\022\021\n\tthickness\030\004 \001(\001\022#\n\nfill_color\030\005 \001"
  "(\0132\017.foxglove.Color\022&\n\routline_color\030\006 \001"
  "(\0132\017.foxglove.Colorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fCircleAnnotation_2eproto_deps[3] = {
  &::descriptor_table_foxglove_2fColor_2eproto,
  &::descriptor_table_foxglove_2fPoint2_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fCircleAnnotation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fCircleAnnotation_2eproto = {
    false, false, 347, descriptor_table_protodef_foxglove_2fCircleAnnotation_2eproto,
    "foxglove/CircleAnnotation.proto",
    &descriptor_table_foxglove_2fCircleAnnotation_2eproto_once, descriptor_table_foxglove_2fCircleAnnotation_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fCircleAnnotation_2eproto::offsets,
    file_level_metadata_foxglove_2fCircleAnnotation_2eproto, file_level_enum_descriptors_foxglove_2fCircleAnnotation_2eproto,
    file_level_service_descriptors_foxglove_2fCircleAnnotation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fCircleAnnotation_2eproto_getter() {
  return &descriptor_table_foxglove_2fCircleAnnotation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fCircleAnnotation_2eproto(&descriptor_table_foxglove_2fCircleAnnotation_2eproto);
namespace foxglove {

// ===================================================================

class CircleAnnotation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CircleAnnotation* msg);
  static const ::foxglove::Point2& position(const CircleAnnotation* msg);
  static const ::foxglove::Color& fill_color(const CircleAnnotation* msg);
  static const ::foxglove::Color& outline_color(const CircleAnnotation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CircleAnnotation::_Internal::timestamp(const CircleAnnotation* msg) {
  return *msg->_impl_.timestamp_;
}
const ::foxglove::Point2&
CircleAnnotation::_Internal::position(const CircleAnnotation* msg) {
  return *msg->_impl_.position_;
}
const ::foxglove::Color&
CircleAnnotation::_Internal::fill_color(const CircleAnnotation* msg) {
  return *msg->_impl_.fill_color_;
}
const ::foxglove::Color&
CircleAnnotation::_Internal::outline_color(const CircleAnnotation* msg) {
  return *msg->_impl_.outline_color_;
}
void CircleAnnotation::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void CircleAnnotation::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void CircleAnnotation::clear_fill_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.fill_color_ != nullptr) {
    delete _impl_.fill_color_;
  }
  _impl_.fill_color_ = nullptr;
}
void CircleAnnotation::clear_outline_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.outline_color_ != nullptr) {
    delete _impl_.outline_color_;
  }
  _impl_.outline_color_ = nullptr;
}
CircleAnnotation::CircleAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.CircleAnnotation)
}
CircleAnnotation::CircleAnnotation(const CircleAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CircleAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.fill_color_){nullptr}
    , decltype(_impl_.outline_color_){nullptr}
    , decltype(_impl_.diameter_){}
    , decltype(_impl_.thickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::foxglove::Point2(*from._impl_.position_);
  }
  if (from._internal_has_fill_color()) {
    _this->_impl_.fill_color_ = new ::foxglove::Color(*from._impl_.fill_color_);
  }
  if (from._internal_has_outline_color()) {
    _this->_impl_.outline_color_ = new ::foxglove::Color(*from._impl_.outline_color_);
  }
  ::memcpy(&_impl_.diameter_, &from._impl_.diameter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thickness_) -
    reinterpret_cast<char*>(&_impl_.diameter_)) + sizeof(_impl_.thickness_));
  // @@protoc_insertion_point(copy_constructor:foxglove.CircleAnnotation)
}

inline void CircleAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.fill_color_){nullptr}
    , decltype(_impl_.outline_color_){nullptr}
    , decltype(_impl_.diameter_){0}
    , decltype(_impl_.thickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CircleAnnotation::~CircleAnnotation() {
  // @@protoc_insertion_point(destructor:foxglove.CircleAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CircleAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.fill_color_;
  if (this != internal_default_instance()) delete _impl_.outline_color_;
}

void CircleAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CircleAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CircleAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fill_color_ != nullptr) {
    delete _impl_.fill_color_;
  }
  _impl_.fill_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.outline_color_ != nullptr) {
    delete _impl_.outline_color_;
  }
  _impl_.outline_color_ = nullptr;
  ::memset(&_impl_.diameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.thickness_) -
      reinterpret_cast<char*>(&_impl_.diameter_)) + sizeof(_impl_.thickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircleAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Point2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double diameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Color fill_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Color outline_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CircleAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.CircleAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Point2 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // double diameter = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diameter = this->_internal_diameter();
  uint64_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_diameter(), target);
  }

  // double thickness = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_thickness(), target);
  }

  // .foxglove.Color fill_color = 5;
  if (this->_internal_has_fill_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fill_color(this),
        _Internal::fill_color(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Color outline_color = 6;
  if (this->_internal_has_outline_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::outline_color(this),
        _Internal::outline_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.CircleAnnotation)
  return target;
}

size_t CircleAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.CircleAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .foxglove.Point2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .foxglove.Color fill_color = 5;
  if (this->_internal_has_fill_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fill_color_);
  }

  // .foxglove.Color outline_color = 6;
  if (this->_internal_has_outline_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outline_color_);
  }

  // double diameter = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diameter = this->_internal_diameter();
  uint64_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    total_size += 1 + 8;
  }

  // double thickness = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CircleAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CircleAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CircleAnnotation::GetClassData() const { return &_class_data_; }


void CircleAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CircleAnnotation*>(&to_msg);
  auto& from = static_cast<const CircleAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CircleAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::foxglove::Point2::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_fill_color()) {
    _this->_internal_mutable_fill_color()->::foxglove::Color::MergeFrom(
        from._internal_fill_color());
  }
  if (from._internal_has_outline_color()) {
    _this->_internal_mutable_outline_color()->::foxglove::Color::MergeFrom(
        from._internal_outline_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diameter = from._internal_diameter();
  uint64_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    _this->_internal_set_diameter(from._internal_diameter());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_thickness = from._internal_thickness();
  uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CircleAnnotation::CopyFrom(const CircleAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CircleAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleAnnotation::IsInitialized() const {
  return true;
}

void CircleAnnotation::InternalSwap(CircleAnnotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircleAnnotation, _impl_.thickness_)
      + sizeof(CircleAnnotation::_impl_.thickness_)
      - PROTOBUF_FIELD_OFFSET(CircleAnnotation, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CircleAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fCircleAnnotation_2eproto_getter, &descriptor_table_foxglove_2fCircleAnnotation_2eproto_once,
      file_level_metadata_foxglove_2fCircleAnnotation_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::CircleAnnotation*
Arena::CreateMaybeMessage< ::foxglove::CircleAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::CircleAnnotation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
