// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CircleAnnotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point2.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fCircleAnnotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fCircleAnnotation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fCircleAnnotation_2eproto;
namespace foxglove {
class CircleAnnotation;
struct CircleAnnotationDefaultTypeInternal;
extern CircleAnnotationDefaultTypeInternal _CircleAnnotation_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::CircleAnnotation* Arena::CreateMaybeMessage<::foxglove::CircleAnnotation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class CircleAnnotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.CircleAnnotation) */ {
 public:
  inline CircleAnnotation() : CircleAnnotation(nullptr) {}
  ~CircleAnnotation() override;
  explicit PROTOBUF_CONSTEXPR CircleAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CircleAnnotation(const CircleAnnotation& from);
  CircleAnnotation(CircleAnnotation&& from) noexcept
    : CircleAnnotation() {
    *this = ::std::move(from);
  }

  inline CircleAnnotation& operator=(const CircleAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircleAnnotation& operator=(CircleAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircleAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircleAnnotation* internal_default_instance() {
    return reinterpret_cast<const CircleAnnotation*>(
               &_CircleAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CircleAnnotation& a, CircleAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(CircleAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircleAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircleAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircleAnnotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CircleAnnotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CircleAnnotation& from) {
    CircleAnnotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircleAnnotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.CircleAnnotation";
  }
  protected:
  explicit CircleAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kPositionFieldNumber = 2,
    kFillColorFieldNumber = 5,
    kOutlineColorFieldNumber = 6,
    kDiameterFieldNumber = 3,
    kThicknessFieldNumber = 4,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .foxglove.Point2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::foxglove::Point2& position() const;
  PROTOBUF_NODISCARD ::foxglove::Point2* release_position();
  ::foxglove::Point2* mutable_position();
  void set_allocated_position(::foxglove::Point2* position);
  private:
  const ::foxglove::Point2& _internal_position() const;
  ::foxglove::Point2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::foxglove::Point2* position);
  ::foxglove::Point2* unsafe_arena_release_position();

  // .foxglove.Color fill_color = 5;
  bool has_fill_color() const;
  private:
  bool _internal_has_fill_color() const;
  public:
  void clear_fill_color();
  const ::foxglove::Color& fill_color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_fill_color();
  ::foxglove::Color* mutable_fill_color();
  void set_allocated_fill_color(::foxglove::Color* fill_color);
  private:
  const ::foxglove::Color& _internal_fill_color() const;
  ::foxglove::Color* _internal_mutable_fill_color();
  public:
  void unsafe_arena_set_allocated_fill_color(
      ::foxglove::Color* fill_color);
  ::foxglove::Color* unsafe_arena_release_fill_color();

  // .foxglove.Color outline_color = 6;
  bool has_outline_color() const;
  private:
  bool _internal_has_outline_color() const;
  public:
  void clear_outline_color();
  const ::foxglove::Color& outline_color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_outline_color();
  ::foxglove::Color* mutable_outline_color();
  void set_allocated_outline_color(::foxglove::Color* outline_color);
  private:
  const ::foxglove::Color& _internal_outline_color() const;
  ::foxglove::Color* _internal_mutable_outline_color();
  public:
  void unsafe_arena_set_allocated_outline_color(
      ::foxglove::Color* outline_color);
  ::foxglove::Color* unsafe_arena_release_outline_color();

  // double diameter = 3;
  void clear_diameter();
  double diameter() const;
  void set_diameter(double value);
  private:
  double _internal_diameter() const;
  void _internal_set_diameter(double value);
  public:

  // double thickness = 4;
  void clear_thickness();
  double thickness() const;
  void set_thickness(double value);
  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.CircleAnnotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::foxglove::Point2* position_;
    ::foxglove::Color* fill_color_;
    ::foxglove::Color* outline_color_;
    double diameter_;
    double thickness_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fCircleAnnotation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CircleAnnotation

// .google.protobuf.Timestamp timestamp = 1;
inline bool CircleAnnotation::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool CircleAnnotation::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CircleAnnotation::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CircleAnnotation::timestamp() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.timestamp)
  return _internal_timestamp();
}
inline void CircleAnnotation::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CircleAnnotation.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CircleAnnotation::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CircleAnnotation::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CircleAnnotation::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CircleAnnotation::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.timestamp)
  return _msg;
}
inline void CircleAnnotation::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.timestamp)
}

// .foxglove.Point2 position = 2;
inline bool CircleAnnotation::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CircleAnnotation::has_position() const {
  return _internal_has_position();
}
inline const ::foxglove::Point2& CircleAnnotation::_internal_position() const {
  const ::foxglove::Point2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Point2&>(
      ::foxglove::_Point2_default_instance_);
}
inline const ::foxglove::Point2& CircleAnnotation::position() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.position)
  return _internal_position();
}
inline void CircleAnnotation::unsafe_arena_set_allocated_position(
    ::foxglove::Point2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CircleAnnotation.position)
}
inline ::foxglove::Point2* CircleAnnotation::release_position() {
  
  ::foxglove::Point2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Point2* CircleAnnotation::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.position)
  
  ::foxglove::Point2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::foxglove::Point2* CircleAnnotation::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Point2>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::foxglove::Point2* CircleAnnotation::mutable_position() {
  ::foxglove::Point2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.position)
  return _msg;
}
inline void CircleAnnotation::set_allocated_position(::foxglove::Point2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.position)
}

// double diameter = 3;
inline void CircleAnnotation::clear_diameter() {
  _impl_.diameter_ = 0;
}
inline double CircleAnnotation::_internal_diameter() const {
  return _impl_.diameter_;
}
inline double CircleAnnotation::diameter() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.diameter)
  return _internal_diameter();
}
inline void CircleAnnotation::_internal_set_diameter(double value) {
  
  _impl_.diameter_ = value;
}
inline void CircleAnnotation::set_diameter(double value) {
  _internal_set_diameter(value);
  // @@protoc_insertion_point(field_set:foxglove.CircleAnnotation.diameter)
}

// double thickness = 4;
inline void CircleAnnotation::clear_thickness() {
  _impl_.thickness_ = 0;
}
inline double CircleAnnotation::_internal_thickness() const {
  return _impl_.thickness_;
}
inline double CircleAnnotation::thickness() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.thickness)
  return _internal_thickness();
}
inline void CircleAnnotation::_internal_set_thickness(double value) {
  
  _impl_.thickness_ = value;
}
inline void CircleAnnotation::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:foxglove.CircleAnnotation.thickness)
}

// .foxglove.Color fill_color = 5;
inline bool CircleAnnotation::_internal_has_fill_color() const {
  return this != internal_default_instance() && _impl_.fill_color_ != nullptr;
}
inline bool CircleAnnotation::has_fill_color() const {
  return _internal_has_fill_color();
}
inline const ::foxglove::Color& CircleAnnotation::_internal_fill_color() const {
  const ::foxglove::Color* p = _impl_.fill_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& CircleAnnotation::fill_color() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.fill_color)
  return _internal_fill_color();
}
inline void CircleAnnotation::unsafe_arena_set_allocated_fill_color(
    ::foxglove::Color* fill_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_color_);
  }
  _impl_.fill_color_ = fill_color;
  if (fill_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CircleAnnotation.fill_color)
}
inline ::foxglove::Color* CircleAnnotation::release_fill_color() {
  
  ::foxglove::Color* temp = _impl_.fill_color_;
  _impl_.fill_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::unsafe_arena_release_fill_color() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.fill_color)
  
  ::foxglove::Color* temp = _impl_.fill_color_;
  _impl_.fill_color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::_internal_mutable_fill_color() {
  
  if (_impl_.fill_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.fill_color_ = p;
  }
  return _impl_.fill_color_;
}
inline ::foxglove::Color* CircleAnnotation::mutable_fill_color() {
  ::foxglove::Color* _msg = _internal_mutable_fill_color();
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.fill_color)
  return _msg;
}
inline void CircleAnnotation::set_allocated_fill_color(::foxglove::Color* fill_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_color_);
  }
  if (fill_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color));
    if (message_arena != submessage_arena) {
      fill_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fill_color_ = fill_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.fill_color)
}

// .foxglove.Color outline_color = 6;
inline bool CircleAnnotation::_internal_has_outline_color() const {
  return this != internal_default_instance() && _impl_.outline_color_ != nullptr;
}
inline bool CircleAnnotation::has_outline_color() const {
  return _internal_has_outline_color();
}
inline const ::foxglove::Color& CircleAnnotation::_internal_outline_color() const {
  const ::foxglove::Color* p = _impl_.outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& CircleAnnotation::outline_color() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.outline_color)
  return _internal_outline_color();
}
inline void CircleAnnotation::unsafe_arena_set_allocated_outline_color(
    ::foxglove::Color* outline_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outline_color_);
  }
  _impl_.outline_color_ = outline_color;
  if (outline_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CircleAnnotation.outline_color)
}
inline ::foxglove::Color* CircleAnnotation::release_outline_color() {
  
  ::foxglove::Color* temp = _impl_.outline_color_;
  _impl_.outline_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::unsafe_arena_release_outline_color() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.outline_color)
  
  ::foxglove::Color* temp = _impl_.outline_color_;
  _impl_.outline_color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::_internal_mutable_outline_color() {
  
  if (_impl_.outline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.outline_color_ = p;
  }
  return _impl_.outline_color_;
}
inline ::foxglove::Color* CircleAnnotation::mutable_outline_color() {
  ::foxglove::Color* _msg = _internal_mutable_outline_color();
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.outline_color)
  return _msg;
}
inline void CircleAnnotation::set_allocated_outline_color(::foxglove::Color* outline_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outline_color_);
  }
  if (outline_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color));
    if (message_arena != submessage_arena) {
      outline_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.outline_color_ = outline_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.outline_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto
