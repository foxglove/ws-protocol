// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CubePrimitive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCubePrimitive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCubePrimitive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Pose.pb.h"
#include "foxglove/Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fCubePrimitive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fCubePrimitive_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fCubePrimitive_2eproto;
namespace foxglove {
class CubePrimitive;
struct CubePrimitiveDefaultTypeInternal;
extern CubePrimitiveDefaultTypeInternal _CubePrimitive_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::CubePrimitive* Arena::CreateMaybeMessage<::foxglove::CubePrimitive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class CubePrimitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.CubePrimitive) */ {
 public:
  inline CubePrimitive() : CubePrimitive(nullptr) {}
  ~CubePrimitive() override;
  explicit PROTOBUF_CONSTEXPR CubePrimitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CubePrimitive(const CubePrimitive& from);
  CubePrimitive(CubePrimitive&& from) noexcept
    : CubePrimitive() {
    *this = ::std::move(from);
  }

  inline CubePrimitive& operator=(const CubePrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CubePrimitive& operator=(CubePrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CubePrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CubePrimitive* internal_default_instance() {
    return reinterpret_cast<const CubePrimitive*>(
               &_CubePrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CubePrimitive& a, CubePrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(CubePrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CubePrimitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CubePrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CubePrimitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CubePrimitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CubePrimitive& from) {
    CubePrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CubePrimitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.CubePrimitive";
  }
  protected:
  explicit CubePrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kSizeFieldNumber = 2,
    kColorFieldNumber = 3,
  };
  // .foxglove.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::foxglove::Pose& pose() const;
  PROTOBUF_NODISCARD ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);
  private:
  const ::foxglove::Pose& _internal_pose() const;
  ::foxglove::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::foxglove::Pose* pose);
  ::foxglove::Pose* unsafe_arena_release_pose();

  // .foxglove.Vector3 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::foxglove::Vector3& size() const;
  PROTOBUF_NODISCARD ::foxglove::Vector3* release_size();
  ::foxglove::Vector3* mutable_size();
  void set_allocated_size(::foxglove::Vector3* size);
  private:
  const ::foxglove::Vector3& _internal_size() const;
  ::foxglove::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::foxglove::Vector3* size);
  ::foxglove::Vector3* unsafe_arena_release_size();

  // .foxglove.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::foxglove::Color& color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);
  private:
  const ::foxglove::Color& _internal_color() const;
  ::foxglove::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::foxglove::Color* color);
  ::foxglove::Color* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:foxglove.CubePrimitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::foxglove::Pose* pose_;
    ::foxglove::Vector3* size_;
    ::foxglove::Color* color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fCubePrimitive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CubePrimitive

// .foxglove.Pose pose = 1;
inline bool CubePrimitive::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool CubePrimitive::has_pose() const {
  return _internal_has_pose();
}
inline const ::foxglove::Pose& CubePrimitive::_internal_pose() const {
  const ::foxglove::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Pose&>(
      ::foxglove::_Pose_default_instance_);
}
inline const ::foxglove::Pose& CubePrimitive::pose() const {
  // @@protoc_insertion_point(field_get:foxglove.CubePrimitive.pose)
  return _internal_pose();
}
inline void CubePrimitive::unsafe_arena_set_allocated_pose(
    ::foxglove::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CubePrimitive.pose)
}
inline ::foxglove::Pose* CubePrimitive::release_pose() {
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Pose* CubePrimitive::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.CubePrimitive.pose)
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::foxglove::Pose* CubePrimitive::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::foxglove::Pose* CubePrimitive::mutable_pose() {
  ::foxglove::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:foxglove.CubePrimitive.pose)
  return _msg;
}
inline void CubePrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CubePrimitive.pose)
}

// .foxglove.Vector3 size = 2;
inline bool CubePrimitive::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool CubePrimitive::has_size() const {
  return _internal_has_size();
}
inline const ::foxglove::Vector3& CubePrimitive::_internal_size() const {
  const ::foxglove::Vector3* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Vector3&>(
      ::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& CubePrimitive::size() const {
  // @@protoc_insertion_point(field_get:foxglove.CubePrimitive.size)
  return _internal_size();
}
inline void CubePrimitive::unsafe_arena_set_allocated_size(
    ::foxglove::Vector3* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CubePrimitive.size)
}
inline ::foxglove::Vector3* CubePrimitive::release_size() {
  
  ::foxglove::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Vector3* CubePrimitive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:foxglove.CubePrimitive.size)
  
  ::foxglove::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* CubePrimitive::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::foxglove::Vector3* CubePrimitive::mutable_size() {
  ::foxglove::Vector3* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:foxglove.CubePrimitive.size)
  return _msg;
}
inline void CubePrimitive::set_allocated_size(::foxglove::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CubePrimitive.size)
}

// .foxglove.Color color = 3;
inline bool CubePrimitive::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool CubePrimitive::has_color() const {
  return _internal_has_color();
}
inline const ::foxglove::Color& CubePrimitive::_internal_color() const {
  const ::foxglove::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& CubePrimitive::color() const {
  // @@protoc_insertion_point(field_get:foxglove.CubePrimitive.color)
  return _internal_color();
}
inline void CubePrimitive::unsafe_arena_set_allocated_color(
    ::foxglove::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CubePrimitive.color)
}
inline ::foxglove::Color* CubePrimitive::release_color() {
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* CubePrimitive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:foxglove.CubePrimitive.color)
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* CubePrimitive::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::foxglove::Color* CubePrimitive::mutable_color() {
  ::foxglove::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:foxglove.CubePrimitive.color)
  return _msg;
}
inline void CubePrimitive::set_allocated_color(::foxglove::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CubePrimitive.color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCubePrimitive_2eproto
