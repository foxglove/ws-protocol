// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/SceneEntity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/ArrowPrimitive.pb.h"
#include "foxglove/CubePrimitive.pb.h"
#include "foxglove/CylinderPrimitive.pb.h"
#include "foxglove/KeyValuePair.pb.h"
#include "foxglove/LinePrimitive.pb.h"
#include "foxglove/ModelPrimitive.pb.h"
#include "foxglove/SpherePrimitive.pb.h"
#include "foxglove/TextPrimitive.pb.h"
#include "foxglove/TriangleListPrimitive.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fSceneEntity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fSceneEntity_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fSceneEntity_2eproto;
namespace foxglove {
class SceneEntity;
struct SceneEntityDefaultTypeInternal;
extern SceneEntityDefaultTypeInternal _SceneEntity_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::SceneEntity* Arena::CreateMaybeMessage<::foxglove::SceneEntity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class SceneEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.SceneEntity) */ {
 public:
  inline SceneEntity() : SceneEntity(nullptr) {}
  ~SceneEntity() override;
  explicit PROTOBUF_CONSTEXPR SceneEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEntity(const SceneEntity& from);
  SceneEntity(SceneEntity&& from) noexcept
    : SceneEntity() {
    *this = ::std::move(from);
  }

  inline SceneEntity& operator=(const SceneEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEntity& operator=(SceneEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEntity* internal_default_instance() {
    return reinterpret_cast<const SceneEntity*>(
               &_SceneEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneEntity& a, SceneEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEntity& from) {
    SceneEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.SceneEntity";
  }
  protected:
  explicit SceneEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 6,
    kArrowsFieldNumber = 7,
    kCubesFieldNumber = 8,
    kSpheresFieldNumber = 9,
    kCylindersFieldNumber = 10,
    kLinesFieldNumber = 11,
    kTrianglesFieldNumber = 12,
    kTextsFieldNumber = 13,
    kModelsFieldNumber = 14,
    kFrameIdFieldNumber = 2,
    kIdFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kLifetimeFieldNumber = 4,
    kFrameLockedFieldNumber = 5,
  };
  // repeated .foxglove.KeyValuePair metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::foxglove::KeyValuePair* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::KeyValuePair >*
      mutable_metadata();
  private:
  const ::foxglove::KeyValuePair& _internal_metadata(int index) const;
  ::foxglove::KeyValuePair* _internal_add_metadata();
  public:
  const ::foxglove::KeyValuePair& metadata(int index) const;
  ::foxglove::KeyValuePair* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::KeyValuePair >&
      metadata() const;

  // repeated .foxglove.ArrowPrimitive arrows = 7;
  int arrows_size() const;
  private:
  int _internal_arrows_size() const;
  public:
  void clear_arrows();
  ::foxglove::ArrowPrimitive* mutable_arrows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ArrowPrimitive >*
      mutable_arrows();
  private:
  const ::foxglove::ArrowPrimitive& _internal_arrows(int index) const;
  ::foxglove::ArrowPrimitive* _internal_add_arrows();
  public:
  const ::foxglove::ArrowPrimitive& arrows(int index) const;
  ::foxglove::ArrowPrimitive* add_arrows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ArrowPrimitive >&
      arrows() const;

  // repeated .foxglove.CubePrimitive cubes = 8;
  int cubes_size() const;
  private:
  int _internal_cubes_size() const;
  public:
  void clear_cubes();
  ::foxglove::CubePrimitive* mutable_cubes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CubePrimitive >*
      mutable_cubes();
  private:
  const ::foxglove::CubePrimitive& _internal_cubes(int index) const;
  ::foxglove::CubePrimitive* _internal_add_cubes();
  public:
  const ::foxglove::CubePrimitive& cubes(int index) const;
  ::foxglove::CubePrimitive* add_cubes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CubePrimitive >&
      cubes() const;

  // repeated .foxglove.SpherePrimitive spheres = 9;
  int spheres_size() const;
  private:
  int _internal_spheres_size() const;
  public:
  void clear_spheres();
  ::foxglove::SpherePrimitive* mutable_spheres(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::SpherePrimitive >*
      mutable_spheres();
  private:
  const ::foxglove::SpherePrimitive& _internal_spheres(int index) const;
  ::foxglove::SpherePrimitive* _internal_add_spheres();
  public:
  const ::foxglove::SpherePrimitive& spheres(int index) const;
  ::foxglove::SpherePrimitive* add_spheres();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::SpherePrimitive >&
      spheres() const;

  // repeated .foxglove.CylinderPrimitive cylinders = 10;
  int cylinders_size() const;
  private:
  int _internal_cylinders_size() const;
  public:
  void clear_cylinders();
  ::foxglove::CylinderPrimitive* mutable_cylinders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CylinderPrimitive >*
      mutable_cylinders();
  private:
  const ::foxglove::CylinderPrimitive& _internal_cylinders(int index) const;
  ::foxglove::CylinderPrimitive* _internal_add_cylinders();
  public:
  const ::foxglove::CylinderPrimitive& cylinders(int index) const;
  ::foxglove::CylinderPrimitive* add_cylinders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CylinderPrimitive >&
      cylinders() const;

  // repeated .foxglove.LinePrimitive lines = 11;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::foxglove::LinePrimitive* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::LinePrimitive >*
      mutable_lines();
  private:
  const ::foxglove::LinePrimitive& _internal_lines(int index) const;
  ::foxglove::LinePrimitive* _internal_add_lines();
  public:
  const ::foxglove::LinePrimitive& lines(int index) const;
  ::foxglove::LinePrimitive* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::LinePrimitive >&
      lines() const;

  // repeated .foxglove.TriangleListPrimitive triangles = 12;
  int triangles_size() const;
  private:
  int _internal_triangles_size() const;
  public:
  void clear_triangles();
  ::foxglove::TriangleListPrimitive* mutable_triangles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TriangleListPrimitive >*
      mutable_triangles();
  private:
  const ::foxglove::TriangleListPrimitive& _internal_triangles(int index) const;
  ::foxglove::TriangleListPrimitive* _internal_add_triangles();
  public:
  const ::foxglove::TriangleListPrimitive& triangles(int index) const;
  ::foxglove::TriangleListPrimitive* add_triangles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TriangleListPrimitive >&
      triangles() const;

  // repeated .foxglove.TextPrimitive texts = 13;
  int texts_size() const;
  private:
  int _internal_texts_size() const;
  public:
  void clear_texts();
  ::foxglove::TextPrimitive* mutable_texts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TextPrimitive >*
      mutable_texts();
  private:
  const ::foxglove::TextPrimitive& _internal_texts(int index) const;
  ::foxglove::TextPrimitive* _internal_add_texts();
  public:
  const ::foxglove::TextPrimitive& texts(int index) const;
  ::foxglove::TextPrimitive* add_texts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TextPrimitive >&
      texts() const;

  // repeated .foxglove.ModelPrimitive models = 14;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::foxglove::ModelPrimitive* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ModelPrimitive >*
      mutable_models();
  private:
  const ::foxglove::ModelPrimitive& _internal_models(int index) const;
  ::foxglove::ModelPrimitive* _internal_add_models();
  public:
  const ::foxglove::ModelPrimitive& models(int index) const;
  ::foxglove::ModelPrimitive* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ModelPrimitive >&
      models() const;

  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.protobuf.Duration lifetime = 4;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const ::PROTOBUF_NAMESPACE_ID::Duration& lifetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_lifetime();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lifetime();
  void set_allocated_lifetime(::PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lifetime() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      ::PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lifetime();

  // bool frame_locked = 5;
  void clear_frame_locked();
  bool frame_locked() const;
  void set_frame_locked(bool value);
  private:
  bool _internal_frame_locked() const;
  void _internal_set_frame_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.SceneEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::KeyValuePair > metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ArrowPrimitive > arrows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CubePrimitive > cubes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::SpherePrimitive > spheres_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CylinderPrimitive > cylinders_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::LinePrimitive > lines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TriangleListPrimitive > triangles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TextPrimitive > texts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ModelPrimitive > models_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Duration* lifetime_;
    bool frame_locked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fSceneEntity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneEntity

// .google.protobuf.Timestamp timestamp = 1;
inline bool SceneEntity::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool SceneEntity::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SceneEntity::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SceneEntity::timestamp() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.timestamp)
  return _internal_timestamp();
}
inline void SceneEntity::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.SceneEntity.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SceneEntity::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SceneEntity::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.SceneEntity.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SceneEntity::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SceneEntity::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.timestamp)
  return _msg;
}
inline void SceneEntity::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntity.timestamp)
}

// string frame_id = 2;
inline void SceneEntity::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
}
inline const std::string& SceneEntity::frame_id() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEntity::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.SceneEntity.frame_id)
}
inline std::string* SceneEntity::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.frame_id)
  return _s;
}
inline const std::string& SceneEntity::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void SceneEntity::_internal_set_frame_id(const std::string& value) {
  
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEntity::_internal_mutable_frame_id() {
  
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEntity::release_frame_id() {
  // @@protoc_insertion_point(field_release:foxglove.SceneEntity.frame_id)
  return _impl_.frame_id_.Release();
}
inline void SceneEntity::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntity.frame_id)
}

// string id = 3;
inline void SceneEntity::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SceneEntity::id() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEntity::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.SceneEntity.id)
}
inline std::string* SceneEntity::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.id)
  return _s;
}
inline const std::string& SceneEntity::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SceneEntity::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEntity::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEntity::release_id() {
  // @@protoc_insertion_point(field_release:foxglove.SceneEntity.id)
  return _impl_.id_.Release();
}
inline void SceneEntity::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntity.id)
}

// .google.protobuf.Duration lifetime = 4;
inline bool SceneEntity::_internal_has_lifetime() const {
  return this != internal_default_instance() && _impl_.lifetime_ != nullptr;
}
inline bool SceneEntity::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SceneEntity::_internal_lifetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SceneEntity::lifetime() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.lifetime)
  return _internal_lifetime();
}
inline void SceneEntity::unsafe_arena_set_allocated_lifetime(
    ::PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lifetime_);
  }
  _impl_.lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.SceneEntity.lifetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SceneEntity::release_lifetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.lifetime_;
  _impl_.lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SceneEntity::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:foxglove.SceneEntity.lifetime)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.lifetime_;
  _impl_.lifetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SceneEntity::_internal_mutable_lifetime() {
  
  if (_impl_.lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.lifetime_ = p;
  }
  return _impl_.lifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SceneEntity::mutable_lifetime() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lifetime();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.lifetime)
  return _msg;
}
inline void SceneEntity::set_allocated_lifetime(::PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime));
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntity.lifetime)
}

// bool frame_locked = 5;
inline void SceneEntity::clear_frame_locked() {
  _impl_.frame_locked_ = false;
}
inline bool SceneEntity::_internal_frame_locked() const {
  return _impl_.frame_locked_;
}
inline bool SceneEntity::frame_locked() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.frame_locked)
  return _internal_frame_locked();
}
inline void SceneEntity::_internal_set_frame_locked(bool value) {
  
  _impl_.frame_locked_ = value;
}
inline void SceneEntity::set_frame_locked(bool value) {
  _internal_set_frame_locked(value);
  // @@protoc_insertion_point(field_set:foxglove.SceneEntity.frame_locked)
}

// repeated .foxglove.KeyValuePair metadata = 6;
inline int SceneEntity::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int SceneEntity::metadata_size() const {
  return _internal_metadata_size();
}
inline ::foxglove::KeyValuePair* SceneEntity::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.metadata)
  return _impl_.metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::KeyValuePair >*
SceneEntity::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.metadata)
  return &_impl_.metadata_;
}
inline const ::foxglove::KeyValuePair& SceneEntity::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const ::foxglove::KeyValuePair& SceneEntity::metadata(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.metadata)
  return _internal_metadata(index);
}
inline ::foxglove::KeyValuePair* SceneEntity::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline ::foxglove::KeyValuePair* SceneEntity::add_metadata() {
  ::foxglove::KeyValuePair* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::KeyValuePair >&
SceneEntity::metadata() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.metadata)
  return _impl_.metadata_;
}

// repeated .foxglove.ArrowPrimitive arrows = 7;
inline int SceneEntity::_internal_arrows_size() const {
  return _impl_.arrows_.size();
}
inline int SceneEntity::arrows_size() const {
  return _internal_arrows_size();
}
inline ::foxglove::ArrowPrimitive* SceneEntity::mutable_arrows(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.arrows)
  return _impl_.arrows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ArrowPrimitive >*
SceneEntity::mutable_arrows() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.arrows)
  return &_impl_.arrows_;
}
inline const ::foxglove::ArrowPrimitive& SceneEntity::_internal_arrows(int index) const {
  return _impl_.arrows_.Get(index);
}
inline const ::foxglove::ArrowPrimitive& SceneEntity::arrows(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.arrows)
  return _internal_arrows(index);
}
inline ::foxglove::ArrowPrimitive* SceneEntity::_internal_add_arrows() {
  return _impl_.arrows_.Add();
}
inline ::foxglove::ArrowPrimitive* SceneEntity::add_arrows() {
  ::foxglove::ArrowPrimitive* _add = _internal_add_arrows();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.arrows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ArrowPrimitive >&
SceneEntity::arrows() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.arrows)
  return _impl_.arrows_;
}

// repeated .foxglove.CubePrimitive cubes = 8;
inline int SceneEntity::_internal_cubes_size() const {
  return _impl_.cubes_.size();
}
inline int SceneEntity::cubes_size() const {
  return _internal_cubes_size();
}
inline ::foxglove::CubePrimitive* SceneEntity::mutable_cubes(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.cubes)
  return _impl_.cubes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CubePrimitive >*
SceneEntity::mutable_cubes() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.cubes)
  return &_impl_.cubes_;
}
inline const ::foxglove::CubePrimitive& SceneEntity::_internal_cubes(int index) const {
  return _impl_.cubes_.Get(index);
}
inline const ::foxglove::CubePrimitive& SceneEntity::cubes(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.cubes)
  return _internal_cubes(index);
}
inline ::foxglove::CubePrimitive* SceneEntity::_internal_add_cubes() {
  return _impl_.cubes_.Add();
}
inline ::foxglove::CubePrimitive* SceneEntity::add_cubes() {
  ::foxglove::CubePrimitive* _add = _internal_add_cubes();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.cubes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CubePrimitive >&
SceneEntity::cubes() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.cubes)
  return _impl_.cubes_;
}

// repeated .foxglove.SpherePrimitive spheres = 9;
inline int SceneEntity::_internal_spheres_size() const {
  return _impl_.spheres_.size();
}
inline int SceneEntity::spheres_size() const {
  return _internal_spheres_size();
}
inline ::foxglove::SpherePrimitive* SceneEntity::mutable_spheres(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.spheres)
  return _impl_.spheres_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::SpherePrimitive >*
SceneEntity::mutable_spheres() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.spheres)
  return &_impl_.spheres_;
}
inline const ::foxglove::SpherePrimitive& SceneEntity::_internal_spheres(int index) const {
  return _impl_.spheres_.Get(index);
}
inline const ::foxglove::SpherePrimitive& SceneEntity::spheres(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.spheres)
  return _internal_spheres(index);
}
inline ::foxglove::SpherePrimitive* SceneEntity::_internal_add_spheres() {
  return _impl_.spheres_.Add();
}
inline ::foxglove::SpherePrimitive* SceneEntity::add_spheres() {
  ::foxglove::SpherePrimitive* _add = _internal_add_spheres();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.spheres)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::SpherePrimitive >&
SceneEntity::spheres() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.spheres)
  return _impl_.spheres_;
}

// repeated .foxglove.CylinderPrimitive cylinders = 10;
inline int SceneEntity::_internal_cylinders_size() const {
  return _impl_.cylinders_.size();
}
inline int SceneEntity::cylinders_size() const {
  return _internal_cylinders_size();
}
inline ::foxglove::CylinderPrimitive* SceneEntity::mutable_cylinders(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.cylinders)
  return _impl_.cylinders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CylinderPrimitive >*
SceneEntity::mutable_cylinders() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.cylinders)
  return &_impl_.cylinders_;
}
inline const ::foxglove::CylinderPrimitive& SceneEntity::_internal_cylinders(int index) const {
  return _impl_.cylinders_.Get(index);
}
inline const ::foxglove::CylinderPrimitive& SceneEntity::cylinders(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.cylinders)
  return _internal_cylinders(index);
}
inline ::foxglove::CylinderPrimitive* SceneEntity::_internal_add_cylinders() {
  return _impl_.cylinders_.Add();
}
inline ::foxglove::CylinderPrimitive* SceneEntity::add_cylinders() {
  ::foxglove::CylinderPrimitive* _add = _internal_add_cylinders();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.cylinders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::CylinderPrimitive >&
SceneEntity::cylinders() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.cylinders)
  return _impl_.cylinders_;
}

// repeated .foxglove.LinePrimitive lines = 11;
inline int SceneEntity::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int SceneEntity::lines_size() const {
  return _internal_lines_size();
}
inline ::foxglove::LinePrimitive* SceneEntity::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::LinePrimitive >*
SceneEntity::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.lines)
  return &_impl_.lines_;
}
inline const ::foxglove::LinePrimitive& SceneEntity::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::foxglove::LinePrimitive& SceneEntity::lines(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.lines)
  return _internal_lines(index);
}
inline ::foxglove::LinePrimitive* SceneEntity::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::foxglove::LinePrimitive* SceneEntity::add_lines() {
  ::foxglove::LinePrimitive* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::LinePrimitive >&
SceneEntity::lines() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.lines)
  return _impl_.lines_;
}

// repeated .foxglove.TriangleListPrimitive triangles = 12;
inline int SceneEntity::_internal_triangles_size() const {
  return _impl_.triangles_.size();
}
inline int SceneEntity::triangles_size() const {
  return _internal_triangles_size();
}
inline ::foxglove::TriangleListPrimitive* SceneEntity::mutable_triangles(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.triangles)
  return _impl_.triangles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TriangleListPrimitive >*
SceneEntity::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.triangles)
  return &_impl_.triangles_;
}
inline const ::foxglove::TriangleListPrimitive& SceneEntity::_internal_triangles(int index) const {
  return _impl_.triangles_.Get(index);
}
inline const ::foxglove::TriangleListPrimitive& SceneEntity::triangles(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.triangles)
  return _internal_triangles(index);
}
inline ::foxglove::TriangleListPrimitive* SceneEntity::_internal_add_triangles() {
  return _impl_.triangles_.Add();
}
inline ::foxglove::TriangleListPrimitive* SceneEntity::add_triangles() {
  ::foxglove::TriangleListPrimitive* _add = _internal_add_triangles();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.triangles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TriangleListPrimitive >&
SceneEntity::triangles() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.triangles)
  return _impl_.triangles_;
}

// repeated .foxglove.TextPrimitive texts = 13;
inline int SceneEntity::_internal_texts_size() const {
  return _impl_.texts_.size();
}
inline int SceneEntity::texts_size() const {
  return _internal_texts_size();
}
inline ::foxglove::TextPrimitive* SceneEntity::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.texts)
  return _impl_.texts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TextPrimitive >*
SceneEntity::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.texts)
  return &_impl_.texts_;
}
inline const ::foxglove::TextPrimitive& SceneEntity::_internal_texts(int index) const {
  return _impl_.texts_.Get(index);
}
inline const ::foxglove::TextPrimitive& SceneEntity::texts(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.texts)
  return _internal_texts(index);
}
inline ::foxglove::TextPrimitive* SceneEntity::_internal_add_texts() {
  return _impl_.texts_.Add();
}
inline ::foxglove::TextPrimitive* SceneEntity::add_texts() {
  ::foxglove::TextPrimitive* _add = _internal_add_texts();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.texts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::TextPrimitive >&
SceneEntity::texts() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.texts)
  return _impl_.texts_;
}

// repeated .foxglove.ModelPrimitive models = 14;
inline int SceneEntity::_internal_models_size() const {
  return _impl_.models_.size();
}
inline int SceneEntity::models_size() const {
  return _internal_models_size();
}
inline ::foxglove::ModelPrimitive* SceneEntity::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntity.models)
  return _impl_.models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ModelPrimitive >*
SceneEntity::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.SceneEntity.models)
  return &_impl_.models_;
}
inline const ::foxglove::ModelPrimitive& SceneEntity::_internal_models(int index) const {
  return _impl_.models_.Get(index);
}
inline const ::foxglove::ModelPrimitive& SceneEntity::models(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntity.models)
  return _internal_models(index);
}
inline ::foxglove::ModelPrimitive* SceneEntity::_internal_add_models() {
  return _impl_.models_.Add();
}
inline ::foxglove::ModelPrimitive* SceneEntity::add_models() {
  ::foxglove::ModelPrimitive* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:foxglove.SceneEntity.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::ModelPrimitive >&
SceneEntity::models() const {
  // @@protoc_insertion_point(field_list:foxglove.SceneEntity.models)
  return _impl_.models_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntity_2eproto
