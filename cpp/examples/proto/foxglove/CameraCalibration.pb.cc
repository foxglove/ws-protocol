// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CameraCalibration.proto

#include "foxglove/CameraCalibration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR CameraCalibration::CameraCalibration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.d_)*/{}
  , /*decltype(_impl_.k_)*/{}
  , /*decltype(_impl_.r_)*/{}
  , /*decltype(_impl_.p_)*/{}
  , /*decltype(_impl_.distortion_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraCalibrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraCalibrationDefaultTypeInternal() {}
  union {
    CameraCalibration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fCameraCalibration_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_foxglove_2fCameraCalibration_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fCameraCalibration_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fCameraCalibration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.distortion_model_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.d_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.p_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::CameraCalibration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_CameraCalibration_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fCameraCalibration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n foxglove/CameraCalibration.proto\022\010foxg"
  "love\032\037google/protobuf/timestamp.proto\"\271\001"
  "\n\021CameraCalibration\022-\n\ttimestamp\030\001 \001(\0132\032"
  ".google.protobuf.Timestamp\022\020\n\010frame_id\030\t"
  " \001(\t\022\r\n\005width\030\002 \001(\007\022\016\n\006height\030\003 \001(\007\022\030\n\020d"
  "istortion_model\030\004 \001(\t\022\t\n\001D\030\005 \003(\001\022\t\n\001K\030\006 "
  "\003(\001\022\t\n\001R\030\007 \003(\001\022\t\n\001P\030\010 \003(\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fCameraCalibration_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fCameraCalibration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fCameraCalibration_2eproto = {
    false, false, 273, descriptor_table_protodef_foxglove_2fCameraCalibration_2eproto,
    "foxglove/CameraCalibration.proto",
    &descriptor_table_foxglove_2fCameraCalibration_2eproto_once, descriptor_table_foxglove_2fCameraCalibration_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fCameraCalibration_2eproto::offsets,
    file_level_metadata_foxglove_2fCameraCalibration_2eproto, file_level_enum_descriptors_foxglove_2fCameraCalibration_2eproto,
    file_level_service_descriptors_foxglove_2fCameraCalibration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fCameraCalibration_2eproto_getter() {
  return &descriptor_table_foxglove_2fCameraCalibration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fCameraCalibration_2eproto(&descriptor_table_foxglove_2fCameraCalibration_2eproto);
namespace foxglove {

// ===================================================================

class CameraCalibration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraCalibration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraCalibration::_Internal::timestamp(const CameraCalibration* msg) {
  return *msg->_impl_.timestamp_;
}
void CameraCalibration::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
CameraCalibration::CameraCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.CameraCalibration)
}
CameraCalibration::CameraCalibration(const CameraCalibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraCalibration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){from._impl_.d_}
    , decltype(_impl_.k_){from._impl_.k_}
    , decltype(_impl_.r_){from._impl_.r_}
    , decltype(_impl_.p_){from._impl_.p_}
    , decltype(_impl_.distortion_model_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.distortion_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distortion_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distortion_model().empty()) {
    _this->_impl_.distortion_model_.Set(from._internal_distortion_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    _this->_impl_.frame_id_.Set(from._internal_frame_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:foxglove.CameraCalibration)
}

inline void CameraCalibration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){arena}
    , decltype(_impl_.k_){arena}
    , decltype(_impl_.r_){arena}
    , decltype(_impl_.p_){arena}
    , decltype(_impl_.distortion_model_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.distortion_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distortion_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraCalibration::~CameraCalibration() {
  // @@protoc_insertion_point(destructor:foxglove.CameraCalibration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraCalibration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.d_.~RepeatedField();
  _impl_.k_.~RepeatedField();
  _impl_.r_.~RepeatedField();
  _impl_.p_.~RepeatedField();
  _impl_.distortion_model_.Destroy();
  _impl_.frame_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void CameraCalibration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CameraCalibration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _impl_.k_.Clear();
  _impl_.r_.Clear();
  _impl_.p_.Clear();
  _impl_.distortion_model_.ClearToEmpty();
  _impl_.frame_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // string distortion_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_distortion_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.CameraCalibration.distortion_model"));
        } else
          goto handle_unusual;
        continue;
      // repeated double D = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double K = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_k(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double R = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_r(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_r(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double P = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.CameraCalibration.frame_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraCalibration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.CameraCalibration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // fixed32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_width(), target);
  }

  // fixed32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_height(), target);
  }

  // string distortion_model = 4;
  if (!this->_internal_distortion_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distortion_model().data(), static_cast<int>(this->_internal_distortion_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.CameraCalibration.distortion_model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_distortion_model(), target);
  }

  // repeated double D = 5;
  if (this->_internal_d_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_d(), target);
  }

  // repeated double K = 6;
  if (this->_internal_k_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_k(), target);
  }

  // repeated double R = 7;
  if (this->_internal_r_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_r(), target);
  }

  // repeated double P = 8;
  if (this->_internal_p_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_p(), target);
  }

  // string frame_id = 9;
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.CameraCalibration.frame_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.CameraCalibration)
  return target;
}

size_t CameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.CameraCalibration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double D = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double K = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_k_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double R = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_r_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double P = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string distortion_model = 4;
  if (!this->_internal_distortion_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distortion_model());
  }

  // string frame_id = 9;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // fixed32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraCalibration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraCalibration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraCalibration::GetClassData() const { return &_class_data_; }


void CameraCalibration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraCalibration*>(&to_msg);
  auto& from = static_cast<const CameraCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CameraCalibration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.d_.MergeFrom(from._impl_.d_);
  _this->_impl_.k_.MergeFrom(from._impl_.k_);
  _this->_impl_.r_.MergeFrom(from._impl_.r_);
  _this->_impl_.p_.MergeFrom(from._impl_.p_);
  if (!from._internal_distortion_model().empty()) {
    _this->_internal_set_distortion_model(from._internal_distortion_model());
  }
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibration::IsInitialized() const {
  return true;
}

void CameraCalibration::InternalSwap(CameraCalibration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  _impl_.k_.InternalSwap(&other->_impl_.k_);
  _impl_.r_.InternalSwap(&other->_impl_.r_);
  _impl_.p_.InternalSwap(&other->_impl_.p_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.distortion_model_, lhs_arena,
      &other->_impl_.distortion_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_)
      + sizeof(CameraCalibration::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fCameraCalibration_2eproto_getter, &descriptor_table_foxglove_2fCameraCalibration_2eproto_once,
      file_level_metadata_foxglove_2fCameraCalibration_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::CameraCalibration*
Arena::CreateMaybeMessage< ::foxglove::CameraCalibration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::CameraCalibration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
