// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/ModelPrimitive.proto

#include "foxglove/ModelPrimitive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR ModelPrimitive::ModelPrimitive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.override_color_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelPrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPrimitiveDefaultTypeInternal() {}
  union {
    ModelPrimitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPrimitiveDefaultTypeInternal _ModelPrimitive_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fModelPrimitive_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_foxglove_2fModelPrimitive_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fModelPrimitive_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fModelPrimitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.override_color_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.media_type_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::ModelPrimitive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_ModelPrimitive_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fModelPrimitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035foxglove/ModelPrimitive.proto\022\010foxglov"
  "e\032\024foxglove/Color.proto\032\023foxglove/Pose.p"
  "roto\032\026foxglove/Vector3.proto\"\267\001\n\016ModelPr"
  "imitive\022\034\n\004pose\030\001 \001(\0132\016.foxglove.Pose\022 \n"
  "\005scale\030\002 \001(\0132\021.foxglove.Vector3\022\036\n\005color"
  "\030\003 \001(\0132\017.foxglove.Color\022\026\n\016override_colo"
  "r\030\004 \001(\010\022\013\n\003url\030\005 \001(\t\022\022\n\nmedia_type\030\006 \001(\t"
  "\022\014\n\004data\030\007 \001(\014b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fModelPrimitive_2eproto_deps[3] = {
  &::descriptor_table_foxglove_2fColor_2eproto,
  &::descriptor_table_foxglove_2fPose_2eproto,
  &::descriptor_table_foxglove_2fVector3_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fModelPrimitive_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fModelPrimitive_2eproto = {
    false, false, 302, descriptor_table_protodef_foxglove_2fModelPrimitive_2eproto,
    "foxglove/ModelPrimitive.proto",
    &descriptor_table_foxglove_2fModelPrimitive_2eproto_once, descriptor_table_foxglove_2fModelPrimitive_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fModelPrimitive_2eproto::offsets,
    file_level_metadata_foxglove_2fModelPrimitive_2eproto, file_level_enum_descriptors_foxglove_2fModelPrimitive_2eproto,
    file_level_service_descriptors_foxglove_2fModelPrimitive_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fModelPrimitive_2eproto_getter() {
  return &descriptor_table_foxglove_2fModelPrimitive_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fModelPrimitive_2eproto(&descriptor_table_foxglove_2fModelPrimitive_2eproto);
namespace foxglove {

// ===================================================================

class ModelPrimitive::_Internal {
 public:
  static const ::foxglove::Pose& pose(const ModelPrimitive* msg);
  static const ::foxglove::Vector3& scale(const ModelPrimitive* msg);
  static const ::foxglove::Color& color(const ModelPrimitive* msg);
};

const ::foxglove::Pose&
ModelPrimitive::_Internal::pose(const ModelPrimitive* msg) {
  return *msg->_impl_.pose_;
}
const ::foxglove::Vector3&
ModelPrimitive::_Internal::scale(const ModelPrimitive* msg) {
  return *msg->_impl_.scale_;
}
const ::foxglove::Color&
ModelPrimitive::_Internal::color(const ModelPrimitive* msg) {
  return *msg->_impl_.color_;
}
void ModelPrimitive::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
void ModelPrimitive::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
void ModelPrimitive::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
ModelPrimitive::ModelPrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.ModelPrimitive)
}
ModelPrimitive::ModelPrimitive(const ModelPrimitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelPrimitive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.media_type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.override_color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.media_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_type().empty()) {
    _this->_impl_.media_type_.Set(from._internal_media_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::foxglove::Pose(*from._impl_.pose_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::foxglove::Vector3(*from._impl_.scale_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::foxglove::Color(*from._impl_.color_);
  }
  _this->_impl_.override_color_ = from._impl_.override_color_;
  // @@protoc_insertion_point(copy_constructor:foxglove.ModelPrimitive)
}

inline void ModelPrimitive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.media_type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.override_color_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.media_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelPrimitive::~ModelPrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.ModelPrimitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPrimitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.media_type_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.scale_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void ModelPrimitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.ModelPrimitive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.media_type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _impl_.override_color_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPrimitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .foxglove.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Vector3 scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool override_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.override_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.ModelPrimitive.url"));
        } else
          goto handle_unusual;
        continue;
      // string media_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_media_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.ModelPrimitive.media_type"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPrimitive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.ModelPrimitive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Vector3 scale = 2;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Color color = 3;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // bool override_color = 4;
  if (this->_internal_override_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_override_color(), target);
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // string media_type = 6;
  if (!this->_internal_media_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.media_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_media_type(), target);
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.ModelPrimitive)
  return target;
}

size_t ModelPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.ModelPrimitive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 5;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string media_type = 6;
  if (!this->_internal_media_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_type());
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .foxglove.Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .foxglove.Vector3 scale = 2;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // .foxglove.Color color = 3;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // bool override_color = 4;
  if (this->_internal_override_color() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPrimitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelPrimitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPrimitive::GetClassData() const { return &_class_data_; }


void ModelPrimitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelPrimitive*>(&to_msg);
  auto& from = static_cast<const ModelPrimitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.ModelPrimitive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_media_type().empty()) {
    _this->_internal_set_media_type(from._internal_media_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::foxglove::Pose::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::foxglove::Vector3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::foxglove::Color::MergeFrom(
        from._internal_color());
  }
  if (from._internal_override_color() != 0) {
    _this->_internal_set_override_color(from._internal_override_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPrimitive::CopyFrom(const ModelPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.ModelPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPrimitive::IsInitialized() const {
  return true;
}

void ModelPrimitive::InternalSwap(ModelPrimitive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_type_, lhs_arena,
      &other->_impl_.media_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.override_color_)
      + sizeof(ModelPrimitive::_impl_.override_color_)
      - PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPrimitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fModelPrimitive_2eproto_getter, &descriptor_table_foxglove_2fModelPrimitive_2eproto_once,
      file_level_metadata_foxglove_2fModelPrimitive_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::ModelPrimitive*
Arena::CreateMaybeMessage< ::foxglove::ModelPrimitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::ModelPrimitive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
