// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LinePrimitive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point3.pb.h"
#include "foxglove/Pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fLinePrimitive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fLinePrimitive_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fLinePrimitive_2eproto;
namespace foxglove {
class LinePrimitive;
struct LinePrimitiveDefaultTypeInternal;
extern LinePrimitiveDefaultTypeInternal _LinePrimitive_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::LinePrimitive* Arena::CreateMaybeMessage<::foxglove::LinePrimitive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

enum LinePrimitive_Type : int {
  LinePrimitive_Type_LINE_STRIP = 0,
  LinePrimitive_Type_LINE_LOOP = 1,
  LinePrimitive_Type_LINE_LIST = 2,
  LinePrimitive_Type_LinePrimitive_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LinePrimitive_Type_LinePrimitive_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LinePrimitive_Type_IsValid(int value);
constexpr LinePrimitive_Type LinePrimitive_Type_Type_MIN = LinePrimitive_Type_LINE_STRIP;
constexpr LinePrimitive_Type LinePrimitive_Type_Type_MAX = LinePrimitive_Type_LINE_LIST;
constexpr int LinePrimitive_Type_Type_ARRAYSIZE = LinePrimitive_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinePrimitive_Type_descriptor();
template<typename T>
inline const std::string& LinePrimitive_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinePrimitive_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinePrimitive_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinePrimitive_Type_descriptor(), enum_t_value);
}
inline bool LinePrimitive_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinePrimitive_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinePrimitive_Type>(
    LinePrimitive_Type_descriptor(), name, value);
}
// ===================================================================

class LinePrimitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.LinePrimitive) */ {
 public:
  inline LinePrimitive() : LinePrimitive(nullptr) {}
  ~LinePrimitive() override;
  explicit PROTOBUF_CONSTEXPR LinePrimitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinePrimitive(const LinePrimitive& from);
  LinePrimitive(LinePrimitive&& from) noexcept
    : LinePrimitive() {
    *this = ::std::move(from);
  }

  inline LinePrimitive& operator=(const LinePrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinePrimitive& operator=(LinePrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinePrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinePrimitive* internal_default_instance() {
    return reinterpret_cast<const LinePrimitive*>(
               &_LinePrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinePrimitive& a, LinePrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(LinePrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinePrimitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinePrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinePrimitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinePrimitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinePrimitive& from) {
    LinePrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinePrimitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.LinePrimitive";
  }
  protected:
  explicit LinePrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinePrimitive_Type Type;
  static constexpr Type LINE_STRIP =
    LinePrimitive_Type_LINE_STRIP;
  static constexpr Type LINE_LOOP =
    LinePrimitive_Type_LINE_LOOP;
  static constexpr Type LINE_LIST =
    LinePrimitive_Type_LINE_LIST;
  static inline bool Type_IsValid(int value) {
    return LinePrimitive_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LinePrimitive_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LinePrimitive_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LinePrimitive_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LinePrimitive_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LinePrimitive_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LinePrimitive_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 5,
    kColorsFieldNumber = 7,
    kIndicesFieldNumber = 8,
    kPoseFieldNumber = 2,
    kColorFieldNumber = 6,
    kTypeFieldNumber = 1,
    kScaleInvariantFieldNumber = 4,
    kThicknessFieldNumber = 3,
  };
  // repeated .foxglove.Point3 points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::foxglove::Point3* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Point3 >*
      mutable_points();
  private:
  const ::foxglove::Point3& _internal_points(int index) const;
  ::foxglove::Point3* _internal_add_points();
  public:
  const ::foxglove::Point3& points(int index) const;
  ::foxglove::Point3* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Point3 >&
      points() const;

  // repeated .foxglove.Color colors = 7;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::foxglove::Color* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Color >*
      mutable_colors();
  private:
  const ::foxglove::Color& _internal_colors(int index) const;
  ::foxglove::Color* _internal_add_colors();
  public:
  const ::foxglove::Color& colors(int index) const;
  ::foxglove::Color* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Color >&
      colors() const;

  // repeated fixed32 indices = 8;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  uint32_t _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_indices() const;
  void _internal_add_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_indices();
  public:
  uint32_t indices(int index) const;
  void set_indices(int index, uint32_t value);
  void add_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_indices();

  // .foxglove.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::foxglove::Pose& pose() const;
  PROTOBUF_NODISCARD ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);
  private:
  const ::foxglove::Pose& _internal_pose() const;
  ::foxglove::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::foxglove::Pose* pose);
  ::foxglove::Pose* unsafe_arena_release_pose();

  // .foxglove.Color color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::foxglove::Color& color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);
  private:
  const ::foxglove::Color& _internal_color() const;
  ::foxglove::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::foxglove::Color* color);
  ::foxglove::Color* unsafe_arena_release_color();

  // .foxglove.LinePrimitive.Type type = 1;
  void clear_type();
  ::foxglove::LinePrimitive_Type type() const;
  void set_type(::foxglove::LinePrimitive_Type value);
  private:
  ::foxglove::LinePrimitive_Type _internal_type() const;
  void _internal_set_type(::foxglove::LinePrimitive_Type value);
  public:

  // bool scale_invariant = 4;
  void clear_scale_invariant();
  bool scale_invariant() const;
  void set_scale_invariant(bool value);
  private:
  bool _internal_scale_invariant() const;
  void _internal_set_scale_invariant(bool value);
  public:

  // double thickness = 3;
  void clear_thickness();
  double thickness() const;
  void set_thickness(double value);
  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.LinePrimitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Point3 > points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Color > colors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > indices_;
    ::foxglove::Pose* pose_;
    ::foxglove::Color* color_;
    int type_;
    bool scale_invariant_;
    double thickness_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fLinePrimitive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinePrimitive

// .foxglove.LinePrimitive.Type type = 1;
inline void LinePrimitive::clear_type() {
  _impl_.type_ = 0;
}
inline ::foxglove::LinePrimitive_Type LinePrimitive::_internal_type() const {
  return static_cast< ::foxglove::LinePrimitive_Type >(_impl_.type_);
}
inline ::foxglove::LinePrimitive_Type LinePrimitive::type() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.type)
  return _internal_type();
}
inline void LinePrimitive::_internal_set_type(::foxglove::LinePrimitive_Type value) {
  
  _impl_.type_ = value;
}
inline void LinePrimitive::set_type(::foxglove::LinePrimitive_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.type)
}

// .foxglove.Pose pose = 2;
inline bool LinePrimitive::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool LinePrimitive::has_pose() const {
  return _internal_has_pose();
}
inline const ::foxglove::Pose& LinePrimitive::_internal_pose() const {
  const ::foxglove::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Pose&>(
      ::foxglove::_Pose_default_instance_);
}
inline const ::foxglove::Pose& LinePrimitive::pose() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.pose)
  return _internal_pose();
}
inline void LinePrimitive::unsafe_arena_set_allocated_pose(
    ::foxglove::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.LinePrimitive.pose)
}
inline ::foxglove::Pose* LinePrimitive::release_pose() {
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Pose* LinePrimitive::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.LinePrimitive.pose)
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::foxglove::Pose* LinePrimitive::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::foxglove::Pose* LinePrimitive::mutable_pose() {
  ::foxglove::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.pose)
  return _msg;
}
inline void LinePrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LinePrimitive.pose)
}

// double thickness = 3;
inline void LinePrimitive::clear_thickness() {
  _impl_.thickness_ = 0;
}
inline double LinePrimitive::_internal_thickness() const {
  return _impl_.thickness_;
}
inline double LinePrimitive::thickness() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.thickness)
  return _internal_thickness();
}
inline void LinePrimitive::_internal_set_thickness(double value) {
  
  _impl_.thickness_ = value;
}
inline void LinePrimitive::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.thickness)
}

// bool scale_invariant = 4;
inline void LinePrimitive::clear_scale_invariant() {
  _impl_.scale_invariant_ = false;
}
inline bool LinePrimitive::_internal_scale_invariant() const {
  return _impl_.scale_invariant_;
}
inline bool LinePrimitive::scale_invariant() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.scale_invariant)
  return _internal_scale_invariant();
}
inline void LinePrimitive::_internal_set_scale_invariant(bool value) {
  
  _impl_.scale_invariant_ = value;
}
inline void LinePrimitive::set_scale_invariant(bool value) {
  _internal_set_scale_invariant(value);
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.scale_invariant)
}

// repeated .foxglove.Point3 points = 5;
inline int LinePrimitive::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int LinePrimitive::points_size() const {
  return _internal_points_size();
}
inline ::foxglove::Point3* LinePrimitive::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Point3 >*
LinePrimitive::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.points)
  return &_impl_.points_;
}
inline const ::foxglove::Point3& LinePrimitive::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::foxglove::Point3& LinePrimitive::points(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.points)
  return _internal_points(index);
}
inline ::foxglove::Point3* LinePrimitive::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::foxglove::Point3* LinePrimitive::add_points() {
  ::foxglove::Point3* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Point3 >&
LinePrimitive::points() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.points)
  return _impl_.points_;
}

// .foxglove.Color color = 6;
inline bool LinePrimitive::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool LinePrimitive::has_color() const {
  return _internal_has_color();
}
inline const ::foxglove::Color& LinePrimitive::_internal_color() const {
  const ::foxglove::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& LinePrimitive::color() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.color)
  return _internal_color();
}
inline void LinePrimitive::unsafe_arena_set_allocated_color(
    ::foxglove::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.LinePrimitive.color)
}
inline ::foxglove::Color* LinePrimitive::release_color() {
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* LinePrimitive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:foxglove.LinePrimitive.color)
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* LinePrimitive::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::foxglove::Color* LinePrimitive::mutable_color() {
  ::foxglove::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.color)
  return _msg;
}
inline void LinePrimitive::set_allocated_color(::foxglove::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LinePrimitive.color)
}

// repeated .foxglove.Color colors = 7;
inline int LinePrimitive::_internal_colors_size() const {
  return _impl_.colors_.size();
}
inline int LinePrimitive::colors_size() const {
  return _internal_colors_size();
}
inline ::foxglove::Color* LinePrimitive::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.colors)
  return _impl_.colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Color >*
LinePrimitive::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.colors)
  return &_impl_.colors_;
}
inline const ::foxglove::Color& LinePrimitive::_internal_colors(int index) const {
  return _impl_.colors_.Get(index);
}
inline const ::foxglove::Color& LinePrimitive::colors(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.colors)
  return _internal_colors(index);
}
inline ::foxglove::Color* LinePrimitive::_internal_add_colors() {
  return _impl_.colors_.Add();
}
inline ::foxglove::Color* LinePrimitive::add_colors() {
  ::foxglove::Color* _add = _internal_add_colors();
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foxglove::Color >&
LinePrimitive::colors() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.colors)
  return _impl_.colors_;
}

// repeated fixed32 indices = 8;
inline int LinePrimitive::_internal_indices_size() const {
  return _impl_.indices_.size();
}
inline int LinePrimitive::indices_size() const {
  return _internal_indices_size();
}
inline void LinePrimitive::clear_indices() {
  _impl_.indices_.Clear();
}
inline uint32_t LinePrimitive::_internal_indices(int index) const {
  return _impl_.indices_.Get(index);
}
inline uint32_t LinePrimitive::indices(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.indices)
  return _internal_indices(index);
}
inline void LinePrimitive::set_indices(int index, uint32_t value) {
  _impl_.indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.indices)
}
inline void LinePrimitive::_internal_add_indices(uint32_t value) {
  _impl_.indices_.Add(value);
}
inline void LinePrimitive::add_indices(uint32_t value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
LinePrimitive::_internal_indices() const {
  return _impl_.indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
LinePrimitive::indices() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
LinePrimitive::_internal_mutable_indices() {
  return &_impl_.indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
LinePrimitive::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.indices)
  return _internal_mutable_indices();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::foxglove::LinePrimitive_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foxglove::LinePrimitive_Type>() {
  return ::foxglove::LinePrimitive_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto
