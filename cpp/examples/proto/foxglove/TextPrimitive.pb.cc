// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/TextPrimitive.proto

#include "foxglove/TextPrimitive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR TextPrimitive::TextPrimitive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.font_size_)*/0
  , /*decltype(_impl_.billboard_)*/false
  , /*decltype(_impl_.scale_invariant_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextPrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextPrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextPrimitiveDefaultTypeInternal() {}
  union {
    TextPrimitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextPrimitiveDefaultTypeInternal _TextPrimitive_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fTextPrimitive_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_foxglove_2fTextPrimitive_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fTextPrimitive_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fTextPrimitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.billboard_),
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.font_size_),
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.scale_invariant_),
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::foxglove::TextPrimitive, _impl_.text_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::TextPrimitive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_TextPrimitive_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fTextPrimitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034foxglove/TextPrimitive.proto\022\010foxglove"
  "\032\024foxglove/Color.proto\032\023foxglove/Pose.pr"
  "oto\"\232\001\n\rTextPrimitive\022\034\n\004pose\030\001 \001(\0132\016.fo"
  "xglove.Pose\022\021\n\tbillboard\030\002 \001(\010\022\021\n\tfont_s"
  "ize\030\003 \001(\001\022\027\n\017scale_invariant\030\004 \001(\010\022\036\n\005co"
  "lor\030\005 \001(\0132\017.foxglove.Color\022\014\n\004text\030\006 \001(\t"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fTextPrimitive_2eproto_deps[2] = {
  &::descriptor_table_foxglove_2fColor_2eproto,
  &::descriptor_table_foxglove_2fPose_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fTextPrimitive_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fTextPrimitive_2eproto = {
    false, false, 248, descriptor_table_protodef_foxglove_2fTextPrimitive_2eproto,
    "foxglove/TextPrimitive.proto",
    &descriptor_table_foxglove_2fTextPrimitive_2eproto_once, descriptor_table_foxglove_2fTextPrimitive_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fTextPrimitive_2eproto::offsets,
    file_level_metadata_foxglove_2fTextPrimitive_2eproto, file_level_enum_descriptors_foxglove_2fTextPrimitive_2eproto,
    file_level_service_descriptors_foxglove_2fTextPrimitive_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fTextPrimitive_2eproto_getter() {
  return &descriptor_table_foxglove_2fTextPrimitive_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fTextPrimitive_2eproto(&descriptor_table_foxglove_2fTextPrimitive_2eproto);
namespace foxglove {

// ===================================================================

class TextPrimitive::_Internal {
 public:
  static const ::foxglove::Pose& pose(const TextPrimitive* msg);
  static const ::foxglove::Color& color(const TextPrimitive* msg);
};

const ::foxglove::Pose&
TextPrimitive::_Internal::pose(const TextPrimitive* msg) {
  return *msg->_impl_.pose_;
}
const ::foxglove::Color&
TextPrimitive::_Internal::color(const TextPrimitive* msg) {
  return *msg->_impl_.color_;
}
void TextPrimitive::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
void TextPrimitive::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
TextPrimitive::TextPrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.TextPrimitive)
}
TextPrimitive::TextPrimitive(const TextPrimitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextPrimitive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.font_size_){}
    , decltype(_impl_.billboard_){}
    , decltype(_impl_.scale_invariant_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::foxglove::Pose(*from._impl_.pose_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::foxglove::Color(*from._impl_.color_);
  }
  ::memcpy(&_impl_.font_size_, &from._impl_.font_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_invariant_) -
    reinterpret_cast<char*>(&_impl_.font_size_)) + sizeof(_impl_.scale_invariant_));
  // @@protoc_insertion_point(copy_constructor:foxglove.TextPrimitive)
}

inline void TextPrimitive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.font_size_){0}
    , decltype(_impl_.billboard_){false}
    , decltype(_impl_.scale_invariant_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextPrimitive::~TextPrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.TextPrimitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextPrimitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void TextPrimitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.TextPrimitive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  ::memset(&_impl_.font_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scale_invariant_) -
      reinterpret_cast<char*>(&_impl_.font_size_)) + sizeof(_impl_.scale_invariant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextPrimitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .foxglove.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool billboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.billboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double font_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool scale_invariant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.scale_invariant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.TextPrimitive.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextPrimitive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.TextPrimitive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // bool billboard = 2;
  if (this->_internal_billboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_billboard(), target);
  }

  // double font_size = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_font_size = this->_internal_font_size();
  uint64_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_font_size(), target);
  }

  // bool scale_invariant = 4;
  if (this->_internal_scale_invariant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_scale_invariant(), target);
  }

  // .foxglove.Color color = 5;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.TextPrimitive.text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.TextPrimitive)
  return target;
}

size_t TextPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.TextPrimitive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 6;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .foxglove.Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .foxglove.Color color = 5;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // double font_size = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_font_size = this->_internal_font_size();
  uint64_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    total_size += 1 + 8;
  }

  // bool billboard = 2;
  if (this->_internal_billboard() != 0) {
    total_size += 1 + 1;
  }

  // bool scale_invariant = 4;
  if (this->_internal_scale_invariant() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextPrimitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextPrimitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextPrimitive::GetClassData() const { return &_class_data_; }


void TextPrimitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextPrimitive*>(&to_msg);
  auto& from = static_cast<const TextPrimitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.TextPrimitive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::foxglove::Pose::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::foxglove::Color::MergeFrom(
        from._internal_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_font_size = from._internal_font_size();
  uint64_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    _this->_internal_set_font_size(from._internal_font_size());
  }
  if (from._internal_billboard() != 0) {
    _this->_internal_set_billboard(from._internal_billboard());
  }
  if (from._internal_scale_invariant() != 0) {
    _this->_internal_set_scale_invariant(from._internal_scale_invariant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextPrimitive::CopyFrom(const TextPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.TextPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPrimitive::IsInitialized() const {
  return true;
}

void TextPrimitive::InternalSwap(TextPrimitive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextPrimitive, _impl_.scale_invariant_)
      + sizeof(TextPrimitive::_impl_.scale_invariant_)
      - PROTOBUF_FIELD_OFFSET(TextPrimitive, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextPrimitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fTextPrimitive_2eproto_getter, &descriptor_table_foxglove_2fTextPrimitive_2eproto_once,
      file_level_metadata_foxglove_2fTextPrimitive_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::TextPrimitive*
Arena::CreateMaybeMessage< ::foxglove::TextPrimitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::TextPrimitive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
