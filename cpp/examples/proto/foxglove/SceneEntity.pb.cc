// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/SceneEntity.proto

#include "foxglove/SceneEntity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR SceneEntity::SceneEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.arrows_)*/{}
  , /*decltype(_impl_.cubes_)*/{}
  , /*decltype(_impl_.spheres_)*/{}
  , /*decltype(_impl_.cylinders_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.triangles_)*/{}
  , /*decltype(_impl_.texts_)*/{}
  , /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.lifetime_)*/nullptr
  , /*decltype(_impl_.frame_locked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEntityDefaultTypeInternal() {}
  union {
    SceneEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEntityDefaultTypeInternal _SceneEntity_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fSceneEntity_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_foxglove_2fSceneEntity_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_foxglove_2fSceneEntity_2eproto = nullptr;

const uint32_t TableStruct_foxglove_2fSceneEntity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.lifetime_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.frame_locked_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.arrows_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.cubes_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.spheres_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.cylinders_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.lines_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.triangles_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.texts_),
  PROTOBUF_FIELD_OFFSET(::foxglove::SceneEntity, _impl_.models_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::SceneEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_SceneEntity_default_instance_._instance,
};

const char descriptor_table_protodef_foxglove_2fSceneEntity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032foxglove/SceneEntity.proto\022\010foxglove\032\035"
  "foxglove/ArrowPrimitive.proto\032\034foxglove/"
  "CubePrimitive.proto\032 foxglove/CylinderPr"
  "imitive.proto\032\033foxglove/KeyValuePair.pro"
  "to\032\034foxglove/LinePrimitive.proto\032\035foxglo"
  "ve/ModelPrimitive.proto\032\036foxglove/Sphere"
  "Primitive.proto\032\034foxglove/TextPrimitive."
  "proto\032$foxglove/TriangleListPrimitive.pr"
  "oto\032\036google/protobuf/duration.proto\032\037goo"
  "gle/protobuf/timestamp.proto\"\243\004\n\013SceneEn"
  "tity\022-\n\ttimestamp\030\001 \001(\0132\032.google.protobu"
  "f.Timestamp\022\020\n\010frame_id\030\002 \001(\t\022\n\n\002id\030\003 \001("
  "\t\022+\n\010lifetime\030\004 \001(\0132\031.google.protobuf.Du"
  "ration\022\024\n\014frame_locked\030\005 \001(\010\022(\n\010metadata"
  "\030\006 \003(\0132\026.foxglove.KeyValuePair\022(\n\006arrows"
  "\030\007 \003(\0132\030.foxglove.ArrowPrimitive\022&\n\005cube"
  "s\030\010 \003(\0132\027.foxglove.CubePrimitive\022*\n\007sphe"
  "res\030\t \003(\0132\031.foxglove.SpherePrimitive\022.\n\t"
  "cylinders\030\n \003(\0132\033.foxglove.CylinderPrimi"
  "tive\022&\n\005lines\030\013 \003(\0132\027.foxglove.LinePrimi"
  "tive\0222\n\ttriangles\030\014 \003(\0132\037.foxglove.Trian"
  "gleListPrimitive\022&\n\005texts\030\r \003(\0132\027.foxglo"
  "ve.TextPrimitive\022(\n\006models\030\016 \003(\0132\030.foxgl"
  "ove.ModelPrimitiveb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fSceneEntity_2eproto_deps[11] = {
  &::descriptor_table_foxglove_2fArrowPrimitive_2eproto,
  &::descriptor_table_foxglove_2fCubePrimitive_2eproto,
  &::descriptor_table_foxglove_2fCylinderPrimitive_2eproto,
  &::descriptor_table_foxglove_2fKeyValuePair_2eproto,
  &::descriptor_table_foxglove_2fLinePrimitive_2eproto,
  &::descriptor_table_foxglove_2fModelPrimitive_2eproto,
  &::descriptor_table_foxglove_2fSpherePrimitive_2eproto,
  &::descriptor_table_foxglove_2fTextPrimitive_2eproto,
  &::descriptor_table_foxglove_2fTriangleListPrimitive_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_foxglove_2fSceneEntity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fSceneEntity_2eproto = {
    false, false, 946, descriptor_table_protodef_foxglove_2fSceneEntity_2eproto,
    "foxglove/SceneEntity.proto",
    &descriptor_table_foxglove_2fSceneEntity_2eproto_once, descriptor_table_foxglove_2fSceneEntity_2eproto_deps, 11, 1,
    schemas, file_default_instances, TableStruct_foxglove_2fSceneEntity_2eproto::offsets,
    file_level_metadata_foxglove_2fSceneEntity_2eproto, file_level_enum_descriptors_foxglove_2fSceneEntity_2eproto,
    file_level_service_descriptors_foxglove_2fSceneEntity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fSceneEntity_2eproto_getter() {
  return &descriptor_table_foxglove_2fSceneEntity_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fSceneEntity_2eproto(&descriptor_table_foxglove_2fSceneEntity_2eproto);
namespace foxglove {

// ===================================================================

class SceneEntity::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const SceneEntity* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& lifetime(const SceneEntity* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SceneEntity::_Internal::timestamp(const SceneEntity* msg) {
  return *msg->_impl_.timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SceneEntity::_Internal::lifetime(const SceneEntity* msg) {
  return *msg->_impl_.lifetime_;
}
void SceneEntity::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void SceneEntity::clear_lifetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.lifetime_ != nullptr) {
    delete _impl_.lifetime_;
  }
  _impl_.lifetime_ = nullptr;
}
void SceneEntity::clear_metadata() {
  _impl_.metadata_.Clear();
}
void SceneEntity::clear_arrows() {
  _impl_.arrows_.Clear();
}
void SceneEntity::clear_cubes() {
  _impl_.cubes_.Clear();
}
void SceneEntity::clear_spheres() {
  _impl_.spheres_.Clear();
}
void SceneEntity::clear_cylinders() {
  _impl_.cylinders_.Clear();
}
void SceneEntity::clear_lines() {
  _impl_.lines_.Clear();
}
void SceneEntity::clear_triangles() {
  _impl_.triangles_.Clear();
}
void SceneEntity::clear_texts() {
  _impl_.texts_.Clear();
}
void SceneEntity::clear_models() {
  _impl_.models_.Clear();
}
SceneEntity::SceneEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.SceneEntity)
}
SceneEntity::SceneEntity(const SceneEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.arrows_){from._impl_.arrows_}
    , decltype(_impl_.cubes_){from._impl_.cubes_}
    , decltype(_impl_.spheres_){from._impl_.spheres_}
    , decltype(_impl_.cylinders_){from._impl_.cylinders_}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.triangles_){from._impl_.triangles_}
    , decltype(_impl_.texts_){from._impl_.texts_}
    , decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.lifetime_){nullptr}
    , decltype(_impl_.frame_locked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    _this->_impl_.frame_id_.Set(from._internal_frame_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_lifetime()) {
    _this->_impl_.lifetime_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.lifetime_);
  }
  _this->_impl_.frame_locked_ = from._impl_.frame_locked_;
  // @@protoc_insertion_point(copy_constructor:foxglove.SceneEntity)
}

inline void SceneEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){arena}
    , decltype(_impl_.arrows_){arena}
    , decltype(_impl_.cubes_){arena}
    , decltype(_impl_.spheres_){arena}
    , decltype(_impl_.cylinders_){arena}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.triangles_){arena}
    , decltype(_impl_.texts_){arena}
    , decltype(_impl_.models_){arena}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.lifetime_){nullptr}
    , decltype(_impl_.frame_locked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEntity::~SceneEntity() {
  // @@protoc_insertion_point(destructor:foxglove.SceneEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.arrows_.~RepeatedPtrField();
  _impl_.cubes_.~RepeatedPtrField();
  _impl_.spheres_.~RepeatedPtrField();
  _impl_.cylinders_.~RepeatedPtrField();
  _impl_.lines_.~RepeatedPtrField();
  _impl_.triangles_.~RepeatedPtrField();
  _impl_.texts_.~RepeatedPtrField();
  _impl_.models_.~RepeatedPtrField();
  _impl_.frame_id_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.lifetime_;
}

void SceneEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.SceneEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.arrows_.Clear();
  _impl_.cubes_.Clear();
  _impl_.spheres_.Clear();
  _impl_.cylinders_.Clear();
  _impl_.lines_.Clear();
  _impl_.triangles_.Clear();
  _impl_.texts_.Clear();
  _impl_.models_.Clear();
  _impl_.frame_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lifetime_ != nullptr) {
    delete _impl_.lifetime_;
  }
  _impl_.lifetime_ = nullptr;
  _impl_.frame_locked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.SceneEntity.frame_id"));
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "foxglove.SceneEntity.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration lifetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool frame_locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.frame_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.KeyValuePair metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.ArrowPrimitive arrows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.CubePrimitive cubes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cubes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.SpherePrimitive spheres = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spheres(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.CylinderPrimitive cylinders = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cylinders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.LinePrimitive lines = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.TriangleListPrimitive triangles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triangles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.TextPrimitive texts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .foxglove.ModelPrimitive models = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.SceneEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.SceneEntity.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "foxglove.SceneEntity.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .google.protobuf.Duration lifetime = 4;
  if (this->_internal_has_lifetime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lifetime(this),
        _Internal::lifetime(this).GetCachedSize(), target, stream);
  }

  // bool frame_locked = 5;
  if (this->_internal_frame_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_frame_locked(), target);
  }

  // repeated .foxglove.KeyValuePair metadata = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.ArrowPrimitive arrows = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrows_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.CubePrimitive cubes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cubes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cubes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.SpherePrimitive spheres = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spheres_size()); i < n; i++) {
    const auto& repfield = this->_internal_spheres(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.CylinderPrimitive cylinders = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cylinders_size()); i < n; i++) {
    const auto& repfield = this->_internal_cylinders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.LinePrimitive lines = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.TriangleListPrimitive triangles = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triangles_size()); i < n; i++) {
    const auto& repfield = this->_internal_triangles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.TextPrimitive texts = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texts_size()); i < n; i++) {
    const auto& repfield = this->_internal_texts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .foxglove.ModelPrimitive models = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.SceneEntity)
  return target;
}

size_t SceneEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.SceneEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .foxglove.KeyValuePair metadata = 6;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.ArrowPrimitive arrows = 7;
  total_size += 1UL * this->_internal_arrows_size();
  for (const auto& msg : this->_impl_.arrows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.CubePrimitive cubes = 8;
  total_size += 1UL * this->_internal_cubes_size();
  for (const auto& msg : this->_impl_.cubes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.SpherePrimitive spheres = 9;
  total_size += 1UL * this->_internal_spheres_size();
  for (const auto& msg : this->_impl_.spheres_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.CylinderPrimitive cylinders = 10;
  total_size += 1UL * this->_internal_cylinders_size();
  for (const auto& msg : this->_impl_.cylinders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.LinePrimitive lines = 11;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.TriangleListPrimitive triangles = 12;
  total_size += 1UL * this->_internal_triangles_size();
  for (const auto& msg : this->_impl_.triangles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.TextPrimitive texts = 13;
  total_size += 1UL * this->_internal_texts_size();
  for (const auto& msg : this->_impl_.texts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .foxglove.ModelPrimitive models = 14;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .google.protobuf.Duration lifetime = 4;
  if (this->_internal_has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lifetime_);
  }

  // bool frame_locked = 5;
  if (this->_internal_frame_locked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEntity::GetClassData() const { return &_class_data_; }


void SceneEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEntity*>(&to_msg);
  auto& from = static_cast<const SceneEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.SceneEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.arrows_.MergeFrom(from._impl_.arrows_);
  _this->_impl_.cubes_.MergeFrom(from._impl_.cubes_);
  _this->_impl_.spheres_.MergeFrom(from._impl_.spheres_);
  _this->_impl_.cylinders_.MergeFrom(from._impl_.cylinders_);
  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_impl_.triangles_.MergeFrom(from._impl_.triangles_);
  _this->_impl_.texts_.MergeFrom(from._impl_.texts_);
  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_lifetime()) {
    _this->_internal_mutable_lifetime()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_lifetime());
  }
  if (from._internal_frame_locked() != 0) {
    _this->_internal_set_frame_locked(from._internal_frame_locked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEntity::CopyFrom(const SceneEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.SceneEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEntity::IsInitialized() const {
  return true;
}

void SceneEntity::InternalSwap(SceneEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.arrows_.InternalSwap(&other->_impl_.arrows_);
  _impl_.cubes_.InternalSwap(&other->_impl_.cubes_);
  _impl_.spheres_.InternalSwap(&other->_impl_.spheres_);
  _impl_.cylinders_.InternalSwap(&other->_impl_.cylinders_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.triangles_.InternalSwap(&other->_impl_.triangles_);
  _impl_.texts_.InternalSwap(&other->_impl_.texts_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_locked_)
      + sizeof(SceneEntity::_impl_.frame_locked_)
      - PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fSceneEntity_2eproto_getter, &descriptor_table_foxglove_2fSceneEntity_2eproto_once,
      file_level_metadata_foxglove_2fSceneEntity_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::SceneEntity*
Arena::CreateMaybeMessage< ::foxglove::SceneEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::SceneEntity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
