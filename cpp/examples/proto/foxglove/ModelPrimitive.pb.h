// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/ModelPrimitive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Pose.pb.h"
#include "foxglove/Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fModelPrimitive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fModelPrimitive_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foxglove_2fModelPrimitive_2eproto;
namespace foxglove {
class ModelPrimitive;
struct ModelPrimitiveDefaultTypeInternal;
extern ModelPrimitiveDefaultTypeInternal _ModelPrimitive_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::ModelPrimitive* Arena::CreateMaybeMessage<::foxglove::ModelPrimitive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class ModelPrimitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.ModelPrimitive) */ {
 public:
  inline ModelPrimitive() : ModelPrimitive(nullptr) {}
  ~ModelPrimitive() override;
  explicit PROTOBUF_CONSTEXPR ModelPrimitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelPrimitive(const ModelPrimitive& from);
  ModelPrimitive(ModelPrimitive&& from) noexcept
    : ModelPrimitive() {
    *this = ::std::move(from);
  }

  inline ModelPrimitive& operator=(const ModelPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPrimitive& operator=(ModelPrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPrimitive* internal_default_instance() {
    return reinterpret_cast<const ModelPrimitive*>(
               &_ModelPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelPrimitive& a, ModelPrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPrimitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPrimitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelPrimitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelPrimitive& from) {
    ModelPrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPrimitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.ModelPrimitive";
  }
  protected:
  explicit ModelPrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 5,
    kMediaTypeFieldNumber = 6,
    kDataFieldNumber = 7,
    kPoseFieldNumber = 1,
    kScaleFieldNumber = 2,
    kColorFieldNumber = 3,
    kOverrideColorFieldNumber = 4,
  };
  // string url = 5;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string media_type = 6;
  void clear_media_type();
  const std::string& media_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_type();
  PROTOBUF_NODISCARD std::string* release_media_type();
  void set_allocated_media_type(std::string* media_type);
  private:
  const std::string& _internal_media_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_type(const std::string& value);
  std::string* _internal_mutable_media_type();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .foxglove.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::foxglove::Pose& pose() const;
  PROTOBUF_NODISCARD ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);
  private:
  const ::foxglove::Pose& _internal_pose() const;
  ::foxglove::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::foxglove::Pose* pose);
  ::foxglove::Pose* unsafe_arena_release_pose();

  // .foxglove.Vector3 scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::foxglove::Vector3& scale() const;
  PROTOBUF_NODISCARD ::foxglove::Vector3* release_scale();
  ::foxglove::Vector3* mutable_scale();
  void set_allocated_scale(::foxglove::Vector3* scale);
  private:
  const ::foxglove::Vector3& _internal_scale() const;
  ::foxglove::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::foxglove::Vector3* scale);
  ::foxglove::Vector3* unsafe_arena_release_scale();

  // .foxglove.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::foxglove::Color& color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);
  private:
  const ::foxglove::Color& _internal_color() const;
  ::foxglove::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::foxglove::Color* color);
  ::foxglove::Color* unsafe_arena_release_color();

  // bool override_color = 4;
  void clear_override_color();
  bool override_color() const;
  void set_override_color(bool value);
  private:
  bool _internal_override_color() const;
  void _internal_set_override_color(bool value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.ModelPrimitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::foxglove::Pose* pose_;
    ::foxglove::Vector3* scale_;
    ::foxglove::Color* color_;
    bool override_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fModelPrimitive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelPrimitive

// .foxglove.Pose pose = 1;
inline bool ModelPrimitive::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool ModelPrimitive::has_pose() const {
  return _internal_has_pose();
}
inline const ::foxglove::Pose& ModelPrimitive::_internal_pose() const {
  const ::foxglove::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Pose&>(
      ::foxglove::_Pose_default_instance_);
}
inline const ::foxglove::Pose& ModelPrimitive::pose() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.pose)
  return _internal_pose();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_pose(
    ::foxglove::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.ModelPrimitive.pose)
}
inline ::foxglove::Pose* ModelPrimitive::release_pose() {
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Pose* ModelPrimitive::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.pose)
  
  ::foxglove::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::foxglove::Pose* ModelPrimitive::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::foxglove::Pose* ModelPrimitive::mutable_pose() {
  ::foxglove::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.pose)
  return _msg;
}
inline void ModelPrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.pose)
}

// .foxglove.Vector3 scale = 2;
inline bool ModelPrimitive::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool ModelPrimitive::has_scale() const {
  return _internal_has_scale();
}
inline const ::foxglove::Vector3& ModelPrimitive::_internal_scale() const {
  const ::foxglove::Vector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Vector3&>(
      ::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& ModelPrimitive::scale() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.scale)
  return _internal_scale();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_scale(
    ::foxglove::Vector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.ModelPrimitive.scale)
}
inline ::foxglove::Vector3* ModelPrimitive::release_scale() {
  
  ::foxglove::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Vector3* ModelPrimitive::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.scale)
  
  ::foxglove::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* ModelPrimitive::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::foxglove::Vector3* ModelPrimitive::mutable_scale() {
  ::foxglove::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.scale)
  return _msg;
}
inline void ModelPrimitive::set_allocated_scale(::foxglove::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.scale)
}

// .foxglove.Color color = 3;
inline bool ModelPrimitive::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool ModelPrimitive::has_color() const {
  return _internal_has_color();
}
inline const ::foxglove::Color& ModelPrimitive::_internal_color() const {
  const ::foxglove::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(
      ::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& ModelPrimitive::color() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.color)
  return _internal_color();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_color(
    ::foxglove::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.ModelPrimitive.color)
}
inline ::foxglove::Color* ModelPrimitive::release_color() {
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Color* ModelPrimitive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.color)
  
  ::foxglove::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* ModelPrimitive::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::foxglove::Color* ModelPrimitive::mutable_color() {
  ::foxglove::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.color)
  return _msg;
}
inline void ModelPrimitive::set_allocated_color(::foxglove::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.color)
}

// bool override_color = 4;
inline void ModelPrimitive::clear_override_color() {
  _impl_.override_color_ = false;
}
inline bool ModelPrimitive::_internal_override_color() const {
  return _impl_.override_color_;
}
inline bool ModelPrimitive::override_color() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.override_color)
  return _internal_override_color();
}
inline void ModelPrimitive::_internal_set_override_color(bool value) {
  
  _impl_.override_color_ = value;
}
inline void ModelPrimitive::set_override_color(bool value) {
  _internal_set_override_color(value);
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.override_color)
}

// string url = 5;
inline void ModelPrimitive::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::url() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrimitive::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.url)
}
inline std::string* ModelPrimitive::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.url)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ModelPrimitive::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrimitive::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrimitive::release_url() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.url)
  return _impl_.url_.Release();
}
inline void ModelPrimitive::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.url)
}

// string media_type = 6;
inline void ModelPrimitive::clear_media_type() {
  _impl_.media_type_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::media_type() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.media_type)
  return _internal_media_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrimitive::set_media_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.media_type)
}
inline std::string* ModelPrimitive::mutable_media_type() {
  std::string* _s = _internal_mutable_media_type();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.media_type)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_media_type() const {
  return _impl_.media_type_.Get();
}
inline void ModelPrimitive::_internal_set_media_type(const std::string& value) {
  
  _impl_.media_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrimitive::_internal_mutable_media_type() {
  
  return _impl_.media_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrimitive::release_media_type() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.media_type)
  return _impl_.media_type_.Release();
}
inline void ModelPrimitive::set_allocated_media_type(std::string* media_type) {
  if (media_type != nullptr) {
    
  } else {
    
  }
  _impl_.media_type_.SetAllocated(media_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_type_.IsDefault()) {
    _impl_.media_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.media_type)
}

// bytes data = 7;
inline void ModelPrimitive::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::data() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrimitive::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.data)
}
inline std::string* ModelPrimitive::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.data)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ModelPrimitive::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrimitive::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrimitive::release_data() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.data)
  return _impl_.data_.Release();
}
inline void ModelPrimitive::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto
