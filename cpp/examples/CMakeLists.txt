cmake_minimum_required(VERSION 3.15)
project(FoxgloveWebSocketExamples CXX)

find_package(Protobuf 3 REQUIRED)
find_package(FlatBuffers REQUIRED)
find_package(foxglove-websocket REQUIRED)

FILE(GLOB all_protos "proto/foxglove/*.proto")

FOREACH(f ${all_protos})
    file(RELATIVE_PATH f ${CMAKE_CURRENT_SOURCE_DIR}/proto ${f})
    STRING(REGEX REPLACE "\\.proto$" "" f ${f})
    LIST(APPEND proto_sources "autogenerated_protobuf/${f}.pb.h")
    LIST(APPEND proto_sources "autogenerated_protobuf/${f}.pb.cc")
ENDFOREACH(f)

add_custom_command(
    OUTPUT ${proto_sources}
    COMMAND ${CMAKE_COMMAND} -E make_directory autogenerated_protobuf
    COMMAND ${Protobuf_PROTOC_EXECUTABLE} --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/proto --cpp_out=autogenerated_protobuf ${all_protos}
)

FILE(GLOB flatbuffers_schemas "flatbuffers/*.fbs")
build_flatbuffers(
    "${flatbuffers_schemas}" # flatbuffers_schemas
    flatbuffers # schema_include_dirs
    flatbuffers_generated_schemas # custom_target_name
    "" # additional_dependencies
    autogenerated_flatbuffers # generated_includes_dir
    autogenerated_flatbuffers # binary_schemas_dir
    "" # copy_text_schemas_dir
)

add_executable(example_server_protobuf src/example_server_protobuf.cpp ${proto_sources})
target_include_directories(example_server_protobuf PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/autogenerated_protobuf)
target_link_libraries(example_server_protobuf foxglove-websocket::foxglove-websocket protobuf::libprotobuf)

add_executable(example_server_flatbuffers src/example_server_flatbuffers.cpp ${flatbuffer_sources})
add_dependencies(example_server_flatbuffers flatbuffers_generated_schemas)
target_link_libraries(example_server_flatbuffers foxglove-websocket::foxglove-websocket flatbuffers::flatbuffers)
