"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import foxglove.Color_pb2
import foxglove.Pose_pb2
import foxglove.Vector3_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ModelPrimitive(google.protobuf.message.Message):
    """A primitive representing a 3D model file loaded from an external URL or embedded data"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSE_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    COLOR_FIELD_NUMBER: builtins.int
    OVERRIDE_COLOR_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    MEDIA_TYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def pose(self) -> foxglove.Pose_pb2.Pose:
        """Origin of model relative to reference frame"""
        pass
    @property
    def scale(self) -> foxglove.Vector3_pb2.Vector3:
        """Scale factor to apply to the model along each axis"""
        pass
    @property
    def color(self) -> foxglove.Color_pb2.Color:
        """Solid color to use for the whole model if `override_color` is true."""
        pass
    override_color: builtins.bool
    """Whether to use the color specified in `color` instead of any materials embedded in the original model."""

    url: typing.Text
    """URL pointing to model file. One of `url` or `data` should be provided."""

    media_type: typing.Text
    """[Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided."""

    data: builtins.bytes
    """Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data."""

    def __init__(self,
        *,
        pose: typing.Optional[foxglove.Pose_pb2.Pose] = ...,
        scale: typing.Optional[foxglove.Vector3_pb2.Vector3] = ...,
        color: typing.Optional[foxglove.Color_pb2.Color] = ...,
        override_color: builtins.bool = ...,
        url: typing.Text = ...,
        media_type: typing.Text = ...,
        data: builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["color",b"color","pose",b"pose","scale",b"scale"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["color",b"color","data",b"data","media_type",b"media_type","override_color",b"override_color","pose",b"pose","scale",b"scale","url",b"url"]) -> None: ...
global___ModelPrimitive = ModelPrimitive
