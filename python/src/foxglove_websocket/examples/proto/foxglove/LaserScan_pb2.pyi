"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import foxglove.Pose_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class LaserScan(google.protobuf.message.Message):
    """A single scan from a planar laser range-finder"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIMESTAMP_FIELD_NUMBER: builtins.int
    FRAME_ID_FIELD_NUMBER: builtins.int
    POSE_FIELD_NUMBER: builtins.int
    START_ANGLE_FIELD_NUMBER: builtins.int
    END_ANGLE_FIELD_NUMBER: builtins.int
    RANGES_FIELD_NUMBER: builtins.int
    INTENSITIES_FIELD_NUMBER: builtins.int
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp of scan"""
        pass
    frame_id: typing.Text
    """Frame of reference"""

    @property
    def pose(self) -> foxglove.Pose_pb2.Pose:
        """Origin of scan relative to frame of reference; points are positioned in the x-y plane relative to this origin; angles are interpreted as counterclockwise rotations around the z axis with 0 rad being in the +x direction"""
        pass
    start_angle: builtins.float
    """Bearing of first point, in radians"""

    end_angle: builtins.float
    """Bearing of last point, in radians"""

    @property
    def ranges(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Distance of detections from origin; assumed to be at equally-spaced angles between `start_angle` and `end_angle`"""
        pass
    @property
    def intensities(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Intensity of detections"""
        pass
    def __init__(self,
        *,
        timestamp: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        frame_id: typing.Text = ...,
        pose: typing.Optional[foxglove.Pose_pb2.Pose] = ...,
        start_angle: builtins.float = ...,
        end_angle: builtins.float = ...,
        ranges: typing.Optional[typing.Iterable[builtins.float]] = ...,
        intensities: typing.Optional[typing.Iterable[builtins.float]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pose",b"pose","timestamp",b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_angle",b"end_angle","frame_id",b"frame_id","intensities",b"intensities","pose",b"pose","ranges",b"ranges","start_angle",b"start_angle","timestamp",b"timestamp"]) -> None: ...
global___LaserScan = LaserScan
